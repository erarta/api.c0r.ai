"""
Personalized Nutrition Questionnaire System.
Collects comprehensive user preferences for maximum personalization of meal plans.
"""
from __future__ import annotations

from datetime import time, datetime
from typing import Dict, List, Optional, Any, Union
from pydantic import BaseModel, Field
from enum import Enum


class QuestionType(str, Enum):
    """Types of questions in the questionnaire"""
    SINGLE_CHOICE = "single_choice"
    MULTIPLE_CHOICE = "multiple_choice"
    SCALE = "scale"
    TIME_PICKER = "time_picker"
    TEXT_INPUT = "text_input"
    YES_NO = "yes_no"
    SLIDER = "slider"


class Question(BaseModel):
    """Individual questionnaire question"""
    id: str
    type: QuestionType
    title: str
    description: Optional[str] = None
    options: Optional[List[Dict[str, Any]]] = None
    min_value: Optional[int] = None
    max_value: Optional[int] = None
    placeholder: Optional[str] = None
    required: bool = True
    skip_logic: Optional[Dict[str, Any]] = None


class QuestionnaireStep(BaseModel):
    """Step in the questionnaire flow"""
    id: str
    title: str
    subtitle: Optional[str] = None
    icon: str
    questions: List[Question]
    completion_percentage: int


class UserResponse(BaseModel):
    """User's response to a question"""
    question_id: str
    value: Union[str, int, float, List[str], bool]
    timestamp: datetime = Field(default_factory=datetime.utcnow)


class NutritionPreferences(BaseModel):
    """Processed user preferences from questionnaire"""
    # Basic info
    goal: str
    daily_calories_target: Optional[int] = None
    activity_level: str

    # Dietary preferences
    dietary_restrictions: List[str] = Field(default_factory=list)
    allergies: List[str] = Field(default_factory=list)
    disliked_foods: List[str] = Field(default_factory=list)
    favorite_foods: List[str] = Field(default_factory=list)
    cuisines: List[str] = Field(default_factory=list)

    # Eating patterns
    meal_times: Dict[str, str] = Field(default_factory=dict)  # breakfast: "08:00"
    eating_frequency: str  # 3_meals, 5_small_meals, etc
    skip_meals: List[str] = Field(default_factory=list)

    # Lifestyle
    cooking_skill: str
    cooking_time_available: str
    work_schedule: str
    social_eating_frequency: str

    # Health considerations
    health_conditions: List[str] = Field(default_factory=list)
    supplements: List[str] = Field(default_factory=list)
    water_intake_goal: Optional[int] = None

    # Behavioral preferences
    meal_prep_preference: str
    snacking_preference: str
    weekend_eating_style: str
    stress_eating_tendency: int = Field(ge=1, le=5)  # 1-5 scale

    # Motivation and goals
    primary_motivation: str
    weight_goal: Optional[str] = None
    timeline: str
    accountability_preference: str


class NutritionQuestionnaire:
    """
    Comprehensive nutrition questionnaire system that adapts based on user responses
    and generates highly personalized meal plan preferences.
    """

    def __init__(self):
        self.questionnaire_steps = self._build_questionnaire()

    def _build_questionnaire(self) -> List[QuestionnaireStep]:
        """Build the complete questionnaire flow"""

        steps = []

        # Step 1: Welcome and Goals
        steps.append(QuestionnaireStep(
            id="goals_motivation",
            title="–í–∞—à–∏ —Ü–µ–ª–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è",
            subtitle="–ü–æ–Ω–∏–º–∞–Ω–∏–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω",
            icon="üéØ",
            completion_percentage=10,
            questions=[
                Question(
                    id="primary_goal",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ö–∞–∫–∞—è –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –≤ –ø–∏—Ç–∞–Ω–∏–∏?",
                    options=[
                        {"value": "weight_loss", "label": "–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞", "description": "–•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª–µ–≥—á–µ"},
                        {"value": "muscle_gain", "label": "–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã", "description": "–°—Ç—Ä–µ–º–ª—é—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å –º—ã—à—Ü—ã –∏ —Å–∏–ª—É"},
                        {"value": "maintenance", "label": "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã", "description": "–•–æ—á—É –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º–µ"},
                        {"value": "health_improvement", "label": "–£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è", "description": "–§–æ–∫—É—Å –Ω–∞ –æ–±—â–µ–º –æ–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–∏"},
                        {"value": "energy_boost", "label": "–ë–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏", "description": "–•–æ—á—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –±–æ–¥—Ä–µ–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è"},
                        {"value": "digestive_health", "label": "–ó–¥–æ—Ä–æ–≤—å–µ –ñ–ö–¢", "description": "–£–ª—É—á—à–∏—Ç—å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ"}
                    ]
                ),
                Question(
                    id="motivation_level",
                    type=QuestionType.SCALE,
                    title="–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –≤—ã –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ?",
                    min_value=1,
                    max_value=10,
                    description="1 - —Å–ª–∞–±–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è, 10 - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
                ),
                Question(
                    id="timeline",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–í –∫–∞–∫–∏–µ —Å—Ä–æ–∫–∏ —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?",
                    options=[
                        {"value": "1_month", "label": "1 –º–µ—Å—è—Ü", "description": "–ë—ã—Å—Ç—Ä—ã–µ –≤–∏–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"},
                        {"value": "3_months", "label": "3 –º–µ—Å—è—Ü–∞", "description": "–£—Å—Ç–æ–π—á–∏–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"},
                        {"value": "6_months", "label": "6 –º–µ—Å—è—Ü–µ–≤", "description": "–ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è"},
                        {"value": "long_term", "label": "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ", "description": "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å"}
                    ]
                )
            ]
        ))

        # Step 2: Dietary Restrictions and Allergies
        steps.append(QuestionnaireStep(
            id="dietary_restrictions",
            title="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
            subtitle="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö –ø–∏—Ç–∞–Ω–∏—è",
            icon="üö´",
            completion_percentage=25,
            questions=[
                Question(
                    id="dietary_type",
                    type=QuestionType.MULTIPLE_CHOICE,
                    title="–°–ª–µ–¥—É–µ—Ç–µ –ª–∏ –≤—ã –∫–∞–∫–æ–π-—Ç–æ —Å–∏—Å—Ç–µ–º–µ –ø–∏—Ç–∞–Ω–∏—è?",
                    options=[
                        {"value": "none", "label": "–ù–∏–∫–∞–∫–æ–π –æ—Å–æ–±–æ–π —Å–∏—Å—Ç–µ–º—ã"},
                        {"value": "vegetarian", "label": "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ"},
                        {"value": "vegan", "label": "–í–µ–≥–∞–Ω—Å—Ç–≤–æ"},
                        {"value": "pescatarian", "label": "–ü–µ—Å–∫–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ"},
                        {"value": "keto", "label": "–ö–µ—Ç–æ-–¥–∏–µ—Ç–∞"},
                        {"value": "paleo", "label": "–ü–∞–ª–µ–æ"},
                        {"value": "mediterranean", "label": "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è"},
                        {"value": "intermittent_fasting", "label": "–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ"},
                        {"value": "low_carb", "label": "–ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–∞—è"},
                        {"value": "gluten_free", "label": "–ë–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤–∞—è"}
                    ]
                ),
                Question(
                    id="allergies",
                    type=QuestionType.MULTIPLE_CHOICE,
                    title="–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø–∏—â–µ–≤—ã–µ –∞–ª–ª–µ—Ä–≥–∏–∏?",
                    options=[
                        {"value": "none", "label": "–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–π"},
                        {"value": "nuts", "label": "–û—Ä–µ—Ö–∏"},
                        {"value": "shellfish", "label": "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã"},
                        {"value": "dairy", "label": "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"},
                        {"value": "eggs", "label": "–Ø–π—Ü–∞"},
                        {"value": "gluten", "label": "–ì–ª—é—Ç–µ–Ω"},
                        {"value": "soy", "label": "–°–æ—è"},
                        {"value": "fish", "label": "–†—ã–±–∞"},
                        {"value": "sesame", "label": "–ö—É–Ω–∂—É—Ç"},
                        {"value": "other", "label": "–î—Ä—É–≥–∏–µ"}
                    ]
                ),
                Question(
                    id="dislikes",
                    type=QuestionType.MULTIPLE_CHOICE,
                    title="–ß—Ç–æ –≤—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ –µ–¥–∏—Ç–µ?",
                    description="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –ø–ª–∞–Ω–µ",
                    options=[
                        {"value": "none", "label": "–ï–º –≤—Å–µ"},
                        {"value": "mushrooms", "label": "–ì—Ä–∏–±—ã"},
                        {"value": "seafood", "label": "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã"},
                        {"value": "liver", "label": "–ü–µ—á–µ–Ω—å/—Å—É–±–ø—Ä–æ–¥—É–∫—Ç—ã"},
                        {"value": "spicy", "label": "–û—Å—Ç—Ä—É—é –ø–∏—â—É"},
                        {"value": "cilantro", "label": "–ö–∏–Ω–∑—É"},
                        {"value": "olives", "label": "–û–ª–∏–≤–∫–∏"},
                        {"value": "tomatoes", "label": "–ü–æ–º–∏–¥–æ—Ä—ã"},
                        {"value": "onions", "label": "–õ—É–∫"},
                        {"value": "cottage_cheese", "label": "–¢–≤–æ—Ä–æ–≥"},
                        {"value": "avocado", "label": "–ê–≤–æ–∫–∞–¥–æ"}
                    ]
                )
            ]
        ))

        # Step 3: Food Preferences and Favorites
        steps.append(QuestionnaireStep(
            id="food_preferences",
            title="–í–∞—à–∏ –≤–∫—É—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
            subtitle="–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –µ—Å—Ç—å?",
            icon="üòã",
            completion_percentage=40,
            questions=[
                Question(
                    id="favorite_cuisines",
                    type=QuestionType.MULTIPLE_CHOICE,
                    title="–ö–∞–∫–∏–µ –∫—É—Ö–Ω–∏ –º–∏—Ä–∞ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è?",
                    options=[
                        {"value": "russian", "label": "–†—É—Å—Å–∫–∞—è", "emoji": "üá∑üá∫"},
                        {"value": "italian", "label": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "emoji": "üáÆüáπ"},
                        {"value": "asian", "label": "–ê–∑–∏–∞—Ç—Å–∫–∞—è", "emoji": "ü•¢"},
                        {"value": "mediterranean", "label": "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è", "emoji": "ü´í"},
                        {"value": "mexican", "label": "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "emoji": "üåÆ"},
                        {"value": "indian", "label": "–ò–Ω–¥–∏–π—Å–∫–∞—è", "emoji": "üçõ"},
                        {"value": "japanese", "label": "–Ø–ø–æ–Ω—Å–∫–∞—è", "emoji": "üç£"},
                        {"value": "georgian", "label": "–ì—Ä—É–∑–∏–Ω—Å–∫–∞—è", "emoji": "ü•ü"},
                        {"value": "french", "label": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è", "emoji": "üá´üá∑"},
                        {"value": "middle_eastern", "label": "–ë–ª–∏–∂–Ω–µ–≤–æ—Å—Ç–æ—á–Ω–∞—è", "emoji": "üßÜ"}
                    ]
                ),
                Question(
                    id="favorite_proteins",
                    type=QuestionType.MULTIPLE_CHOICE,
                    title="–ö–∞–∫–∏–µ –±–µ–ª–∫–∏ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
                    options=[
                        {"value": "chicken", "label": "–ö—É—Ä–∏—Ü–∞", "emoji": "üêî"},
                        {"value": "beef", "label": "–ì–æ–≤—è–¥–∏–Ω–∞", "emoji": "ü•©"},
                        {"value": "pork", "label": "–°–≤–∏–Ω–∏–Ω–∞", "emoji": "üê∑"},
                        {"value": "fish", "label": "–†—ã–±–∞", "emoji": "üêü"},
                        {"value": "seafood", "label": "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã", "emoji": "ü¶ê"},
                        {"value": "eggs", "label": "–Ø–π—Ü–∞", "emoji": "ü•ö"},
                        {"value": "dairy", "label": "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", "emoji": "üßÄ"},
                        {"value": "legumes", "label": "–ë–æ–±–æ–≤—ã–µ", "emoji": "ü´ò"},
                        {"value": "nuts_seeds", "label": "–û—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ–Ω–∞", "emoji": "ü•ú"},
                        {"value": "tofu_tempeh", "label": "–¢–æ—Ñ—É/—Ç–µ–º–ø–µ", "emoji": "ü´õ"}
                    ]
                ),
                Question(
                    id="carb_preferences",
                    type=QuestionType.MULTIPLE_CHOICE,
                    title="–ö–∞–∫–∏–µ —É–≥–ª–µ–≤–æ–¥—ã –≤—ã –ª—é–±–∏—Ç–µ?",
                    options=[
                        {"value": "rice", "label": "–†–∏—Å", "emoji": "üçö"},
                        {"value": "pasta", "label": "–ü–∞—Å—Ç–∞", "emoji": "üçù"},
                        {"value": "bread", "label": "–•–ª–µ–±", "emoji": "üçû"},
                        {"value": "potatoes", "label": "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "emoji": "ü•î"},
                        {"value": "quinoa", "label": "–ö–∏–Ω–æ–∞", "emoji": "üåæ"},
                        {"value": "buckwheat", "label": "–ì—Ä–µ—á–∫–∞", "emoji": "üåæ"},
                        {"value": "oats", "label": "–û–≤—Å—è–Ω–∫–∞", "emoji": "ü•£"},
                        {"value": "sweet_potato", "label": "–ë–∞—Ç–∞—Ç", "emoji": "üç†"},
                        {"value": "fruits", "label": "–§—Ä—É–∫—Ç—ã", "emoji": "üçé"},
                        {"value": "vegetables", "label": "–û–≤–æ—â–∏", "emoji": "ü•ï"}
                    ]
                )
            ]
        ))

        # Step 4: Eating Schedule and Patterns
        steps.append(QuestionnaireStep(
            id="eating_patterns",
            title="–í–∞—à —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è",
            subtitle="–ö–æ–≥–¥–∞ –∏ –∫–∞–∫ —á–∞—Å—Ç–æ –≤—ã –µ–¥–∏—Ç–µ?",
            icon="‚è∞",
            completion_percentage=55,
            questions=[
                Question(
                    id="breakfast_time",
                    type=QuestionType.TIME_PICKER,
                    title="–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ–±—ã—á–Ω–æ –∑–∞–≤—Ç—Ä–∞–∫–∞–µ—Ç–µ?",
                    description="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –µ—Å–ª–∏ –Ω–µ –∑–∞–≤—Ç—Ä–∞–∫–∞–µ—Ç–µ"
                ),
                Question(
                    id="lunch_time",
                    type=QuestionType.TIME_PICKER,
                    title="–í–æ —Å–∫–æ–ª—å–∫–æ –æ–±–µ–¥–∞–µ—Ç–µ?",
                    description="–í–∞—à–µ –æ–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–µ–¥–∞"
                ),
                Question(
                    id="dinner_time",
                    type=QuestionType.TIME_PICKER,
                    title="–í–æ —Å–∫–æ–ª—å–∫–æ —É–∂–∏–Ω–∞–µ—Ç–µ?",
                    description="–ü—Ä–∏–≤—ã—á–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–∏–Ω–∞"
                ),
                Question(
                    id="eating_frequency",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –µ—Å—Ç—å?",
                    options=[
                        {"value": "3_meals", "label": "3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏", "description": "–ó–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω"},
                        {"value": "5_small", "label": "5-6 –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–∏–µ–º–æ–≤", "description": "–ß–∞—Å—Ç–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –º–∞–ª—ã–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏"},
                        {"value": "2_meals", "label": "2 –±–æ–ª—å—à–∏—Ö –ø—Ä–∏–µ–º–∞", "description": "–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫ –∑–∞–≤—Ç—Ä–∞–∫–∞"},
                        {"value": "flexible", "label": "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫", "description": "–ü–æ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º –∏ –∂–µ–ª–∞–Ω–∏—é"}
                    ]
                ),
                Question(
                    id="snacking_habits",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –ø–µ—Ä–µ–∫—É—Å–∞–º?",
                    options=[
                        {"value": "love_snacks", "label": "–û–±–æ–∂–∞—é –ø–µ—Ä–µ–∫—É—Å—ã", "description": "–ù–µ –º–æ–≥—É –±–µ–∑ –Ω–∏—Ö –æ–±—Ö–æ–¥–∏—Ç—å—Å—è"},
                        {"value": "healthy_snacks", "label": "–¢–æ–ª—å–∫–æ –∑–¥–æ—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–∫—É—Å—ã", "description": "–û—Ä–µ—Ö–∏, —Ñ—Ä—É–∫—Ç—ã, –π–æ–≥—É—Ä—Ç—ã"},
                        {"value": "minimal_snacks", "label": "–ú–∏–Ω–∏–º—É–º –ø–µ—Ä–µ–∫—É—Å–æ–≤", "description": "–¢–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º –≥–æ–ª–æ–¥–µ"},
                        {"value": "no_snacks", "label": "–ë–µ–∑ –ø–µ—Ä–µ–∫—É—Å–æ–≤", "description": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏"}
                    ]
                )
            ]
        ))

        # Step 5: Lifestyle and Cooking
        steps.append(QuestionnaireStep(
            id="lifestyle_cooking",
            title="–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ –≥–æ—Ç–æ–≤–∫–∞",
            subtitle="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö",
            icon="üë©‚Äçüç≥",
            completion_percentage=70,
            questions=[
                Question(
                    id="cooking_skill",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏?",
                    options=[
                        {"value": "beginner", "label": "–ù–∞—á–∏–Ω–∞—é—â–∏–π", "description": "–ü—Ä–æ—Å—Ç—ã–µ –±–ª—é–¥–∞, –º–∏–Ω–∏–º—É–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"},
                        {"value": "intermediate", "label": "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", "description": "–£–º–µ—é –≥–æ—Ç–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞"},
                        {"value": "advanced", "label": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "description": "–õ—é–±–ª—é —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å"},
                        {"value": "professional", "label": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "description": "–ì–æ—Ç–æ–≤–∫–∞ - –º–æ–µ —Ö–æ–±–±–∏"}
                    ]
                ),
                Question(
                    id="cooking_time",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –≥–æ—Ç–æ–≤–∫—É –≤ –¥–µ–Ω—å?",
                    options=[
                        {"value": "minimal", "label": "10-20 –º–∏–Ω—É—Ç", "description": "–ë—ã—Å—Ç—Ä—ã–µ –∏ –ø—Ä–æ—Å—Ç—ã–µ –±–ª—é–¥–∞"},
                        {"value": "moderate", "label": "30-45 –º–∏–Ω—É—Ç", "description": "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≥–æ—Ç–æ–≤–∫—É"},
                        {"value": "generous", "label": "1-1.5 —á–∞—Å–∞", "description": "–õ—é–±–ª—é –ø—Ä–æ—Ü–µ—Å—Å –≥–æ—Ç–æ–≤–∫–∏"},
                        {"value": "extensive", "label": "–ë–æ–ª–µ–µ 1.5 —á–∞—Å–æ–≤", "description": "–ì–æ—Ç–æ–≤–∫–∞ –∫–∞–∫ —Ö–æ–±–±–∏"}
                    ]
                ),
                Question(
                    id="meal_prep",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ meal prep (–∑–∞–≥–æ—Ç–æ–≤–∫–∞–º)?",
                    options=[
                        {"value": "love_prep", "label": "–û–±–æ–∂–∞—é –≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ", "description": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = –¥–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏"},
                        {"value": "some_prep", "label": "–ò–Ω–æ–≥–¥–∞ –∑–∞–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é", "description": "–ö–æ–≥–¥–∞ –µ—Å—Ç—å –≤—Ä–µ–º—è –∏ –∂–µ–ª–∞–Ω–∏–µ"},
                        {"value": "minimal_prep", "label": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏", "description": "–¢–æ–ª—å–∫–æ –Ω–∞—Ä–µ–∑–∫–∞ –æ–≤–æ—â–µ–π"},
                        {"value": "fresh_only", "label": "–¢–æ–ª—å–∫–æ —Å–≤–µ–∂–µ–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ", "description": "–ö–∞–∂–¥—ã–π —Ä–∞–∑ –≥–æ—Ç–æ–≤–ª—é –Ω–æ–≤–æ–µ"}
                    ]
                ),
                Question(
                    id="work_schedule",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫?",
                    options=[
                        {"value": "office_9_5", "label": "–û—Ñ–∏—Å 9-18", "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å"},
                        {"value": "remote_flexible", "label": "–£–¥–∞–ª–µ–Ω–∫–∞ —Å –≥–∏–±–∫–∏–º –≥—Ä–∞—Ñ–∏–∫–æ–º", "description": "–†–∞–±–æ—Ç–∞—é –∏–∑ –¥–æ–º–∞"},
                        {"value": "shift_work", "label": "–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "description": "–†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"},
                        {"value": "irregular", "label": "–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "description": "–§—Ä–∏–ª–∞–Ω—Å, —Å–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"},
                        {"value": "night_shift", "label": "–ù–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã", "description": "–†–∞–±–æ—Ç–∞—é –Ω–æ—á—å—é"},
                        {"value": "student", "label": "–£—á–µ–±–∞", "description": "–°—Ç—É–¥–µ–Ω—Ç/—É—á–∞—â–∏–π—Å—è"}
                    ]
                )
            ]
        ))

        # Step 6: Health and Activity
        steps.append(QuestionnaireStep(
            id="health_activity",
            title="–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            subtitle="–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏",
            icon="üèÉ‚Äç‚ôÄÔ∏è",
            completion_percentage=85,
            questions=[
                Question(
                    id="activity_level",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?",
                    options=[
                        {"value": "sedentary", "label": "–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", "description": "–û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –º–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è"},
                        {"value": "light", "label": "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "description": "–ü—Ä–æ–≥—É–ª–∫–∏, –ª–µ–≥–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"},
                        {"value": "moderate", "label": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "description": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"},
                        {"value": "high", "label": "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "description": "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"},
                        {"value": "athlete", "label": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç", "description": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏"}
                    ]
                ),
                Question(
                    id="health_conditions",
                    type=QuestionType.MULTIPLE_CHOICE,
                    title="–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ?",
                    options=[
                        {"value": "none", "label": "–ù–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π"},
                        {"value": "diabetes", "label": "–î–∏–∞–±–µ—Ç"},
                        {"value": "hypertension", "label": "–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"},
                        {"value": "cholesterol", "label": "–í—ã—Å–æ–∫–∏–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω"},
                        {"value": "ibs", "label": "–°–†–ö (—Å–∏–Ω–¥—Ä–æ–º —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ –∫–∏—à–µ—á–Ω–∏–∫–∞)"},
                        {"value": "gerd", "label": "–ì–≠–†–ë (—Ä–µ—Ñ–ª—é–∫—Å)"},
                        {"value": "thyroid", "label": "–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã"},
                        {"value": "pcos", "label": "–°–ü–ö–Ø"},
                        {"value": "food_intolerances", "label": "–ü–∏—â–µ–≤—ã–µ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏"},
                        {"value": "other", "label": "–î—Ä—É–≥–∏–µ"}
                    ]
                ),
                Question(
                    id="stress_eating",
                    type=QuestionType.SCALE,
                    title="–°–∫–ª–æ–Ω–Ω—ã –ª–∏ –≤—ã –∑–∞–µ–¥–∞—Ç—å —Å—Ç—Ä–µ—Å—Å?",
                    min_value=1,
                    max_value=5,
                    description="1 - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–µ–¥–∞—é, 5 - –æ—á–µ–Ω—å —á–∞—Å—Ç–æ –∑–∞–µ–¥–∞—é —Å—Ç—Ä–µ—Å—Å"
                ),
                Question(
                    id="water_intake",
                    type=QuestionType.SLIDER,
                    title="–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–≤–∞–µ—Ç–µ –≤ –¥–µ–Ω—å? (—Å—Ç–∞–∫–∞–Ω–æ–≤)",
                    min_value=1,
                    max_value=15,
                    description="1 —Å—Ç–∞–∫–∞–Ω = 250 –º–ª"
                )
            ]
        ))

        # Step 7: Social and Weekend Patterns
        steps.append(QuestionnaireStep(
            id="social_patterns",
            title="–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
            subtitle="–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞—à–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –≤—Å—Ç—Ä–µ—á–∏ —Å –¥—Ä—É–∑—å—è–º–∏?",
            icon="üë•",
            completion_percentage=100,
            questions=[
                Question(
                    id="social_eating",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ö–∞–∫ —á–∞—Å—Ç–æ –µ–¥–∏—Ç–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏?",
                    options=[
                        {"value": "rarely", "label": "–†–µ–¥–∫–æ", "description": "–í –æ—Å–Ω–æ–≤–Ω–æ–º –µ–º –æ–¥–∏–Ω/–æ–¥–Ω–∞"},
                        {"value": "sometimes", "label": "–ò–Ω–æ–≥–¥–∞", "description": "1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"},
                        {"value": "often", "label": "–ß–∞—Å—Ç–æ", "description": "3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"},
                        {"value": "always", "label": "–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞", "description": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –µ—Å—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏"}
                    ]
                ),
                Question(
                    id="weekend_eating",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ö–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è –≤–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
                    options=[
                        {"value": "same", "label": "–ù–∏–∫–∞–∫ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è", "description": "–¢–æ—Ç –∂–µ —Ä–µ–∂–∏–º, —á—Ç–æ –∏ –≤ –±—É–¥–Ω–∏"},
                        {"value": "relaxed", "label": "–°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ —Å–≤–æ–±–æ–¥–Ω—ã–º", "description": "–ü–æ–∑–∂–µ –≤—Å—Ç–∞—é, —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ä–µ–∂–∏–º"},
                        {"value": "indulgent", "label": "–ü–æ–∑–≤–æ–ª—è—é —Å–µ–±–µ –≤–æ–ª—å–Ω–æ—Å—Ç–∏", "description": "–ß–∏—Ç–º–∏–ª—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –¥–µ—Å–µ—Ä—Ç—ã"},
                        {"value": "meal_prep", "label": "–ì–æ—Ç–æ–≤–ª—é –Ω–∞ –Ω–µ–¥–µ–ª—é", "description": "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–ª—è –∑–∞–≥–æ—Ç–æ–≤–æ–∫"}
                    ]
                ),
                Question(
                    id="budget_preference",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã?",
                    options=[
                        {"value": "economy", "label": "–≠–∫–æ–Ω–æ–º–Ω—ã–π", "description": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —Ä–∞–∑—É–º–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è"},
                        {"value": "moderate", "label": "–°—Ä–µ–¥–Ω–∏–π", "description": "–ë–∞–ª–∞–Ω—Å —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞"},
                        {"value": "premium", "label": "–ü—Ä–µ–º–∏—É–º", "description": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –¥–æ—Ä–æ–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã"},
                        {"value": "no_limit", "label": "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", "description": "–¶–µ–Ω–∞ –Ω–µ –≤–∞–∂–Ω–∞"}
                    ]
                ),
                Question(
                    id="motivation_support",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ö–∞–∫ –≤–∞–º –ª—É—á—à–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é?",
                    options=[
                        {"value": "daily_tips", "label": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", "description": "–ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"},
                        {"value": "progress_tracking", "label": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", "description": "–ì—Ä–∞—Ñ–∏–∫–∏, –º–µ—Ç—Ä–∏–∫–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"},
                        {"value": "community", "label": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", "description": "–û–±—â–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏"},
                        {"value": "minimal", "label": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "description": "–¢–æ–ª—å–∫–æ –ø–ª–∞–Ω, –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"}
                    ]
                )
            ]
        ))

        return steps

    def get_questionnaire_flow(self, user_id: Optional[str] = None) -> List[QuestionnaireStep]:
        """Get complete questionnaire flow for user"""
        return self.questionnaire_steps

    def process_responses(self, responses: List[UserResponse]) -> NutritionPreferences:
        """Process user responses into structured preferences"""

        response_map = {resp.question_id: resp.value for resp in responses}

        # Process basic goals
        goal = response_map.get("primary_goal", "health_improvement")
        activity_level = response_map.get("activity_level", "moderate")
        timeline = response_map.get("timeline", "3_months")

        # Process dietary restrictions
        dietary_restrictions = []
        dietary_types = response_map.get("dietary_type", [])
        if isinstance(dietary_types, list):
            dietary_restrictions.extend([dt for dt in dietary_types if dt != "none"])

        allergies = response_map.get("allergies", [])
        if isinstance(allergies, list):
            allergies = [a for a in allergies if a != "none"]

        dislikes = response_map.get("dislikes", [])
        if isinstance(dislikes, list):
            dislikes = [d for d in dislikes if d != "none"]

        # Process food preferences
        cuisines = response_map.get("favorite_cuisines", [])
        favorite_proteins = response_map.get("favorite_proteins", [])
        favorite_carbs = response_map.get("carb_preferences", [])

        # Combine into favorites
        favorite_foods = []
        if isinstance(favorite_proteins, list):
            favorite_foods.extend(favorite_proteins)
        if isinstance(favorite_carbs, list):
            favorite_foods.extend(favorite_carbs)

        # Process meal times
        meal_times = {}
        for meal in ["breakfast", "lunch", "dinner"]:
            time_key = f"{meal}_time"
            if time_key in response_map and response_map[time_key]:
                meal_times[meal] = response_map[time_key]

        # Process eating patterns
        eating_frequency = response_map.get("eating_frequency", "3_meals")

        # Process lifestyle
        cooking_skill = response_map.get("cooking_skill", "intermediate")
        cooking_time_available = response_map.get("cooking_time", "moderate")
        work_schedule = response_map.get("work_schedule", "office_9_5")
        social_eating_frequency = response_map.get("social_eating", "sometimes")

        # Process health
        health_conditions = response_map.get("health_conditions", [])
        if isinstance(health_conditions, list):
            health_conditions = [hc for hc in health_conditions if hc != "none"]

        # Process behavioral patterns
        meal_prep_preference = response_map.get("meal_prep", "some_prep")
        snacking_preference = response_map.get("snacking_habits", "healthy_snacks")
        weekend_eating_style = response_map.get("weekend_eating", "relaxed")
        stress_eating_tendency = int(response_map.get("stress_eating", 3))

        # Process motivation
        primary_motivation = response_map.get("motivation_support", "progress_tracking")
        water_intake_goal = response_map.get("water_intake", 8)  # Default 8 glasses

        # Calculate daily calories target based on goal and activity
        daily_calories_target = self._calculate_calories_target(goal, activity_level, response_map)

        return NutritionPreferences(
            goal=goal,
            daily_calories_target=daily_calories_target,
            activity_level=activity_level,
            dietary_restrictions=dietary_restrictions,
            allergies=allergies,
            disliked_foods=dislikes,
            favorite_foods=favorite_foods,
            cuisines=cuisines,
            meal_times=meal_times,
            eating_frequency=eating_frequency,
            skip_meals=[],  # Will be determined from meal_times
            cooking_skill=cooking_skill,
            cooking_time_available=cooking_time_available,
            work_schedule=work_schedule,
            social_eating_frequency=social_eating_frequency,
            health_conditions=health_conditions,
            supplements=[],  # Can be added later
            water_intake_goal=water_intake_goal,
            meal_prep_preference=meal_prep_preference,
            snacking_preference=snacking_preference,
            weekend_eating_style=weekend_eating_style,
            stress_eating_tendency=stress_eating_tendency,
            primary_motivation=primary_motivation,
            weight_goal=goal if goal in ["weight_loss", "muscle_gain"] else None,
            timeline=timeline,
            accountability_preference=primary_motivation
        )

    def _calculate_calories_target(self, goal: str, activity_level: str, responses: Dict[str, Any]) -> Optional[int]:
        """Calculate daily calories target based on goal and activity level"""

        # Base calories by activity level (rough estimates)
        activity_multipliers = {
            "sedentary": 1800,
            "light": 2000,
            "moderate": 2200,
            "high": 2500,
            "athlete": 2800
        }

        base_calories = activity_multipliers.get(activity_level, 2000)

        # Adjust based on goal
        if goal == "weight_loss":
            return int(base_calories * 0.85)  # 15% deficit
        elif goal == "muscle_gain":
            return int(base_calories * 1.15)  # 15% surplus
        elif goal == "maintenance":
            return base_calories
        else:
            return base_calories  # Default for health/energy goals

    def generate_onboarding_summary(self, preferences: NutritionPreferences) -> str:
        """Generate a personalized summary of user preferences"""

        summary_parts = []

        # Goal summary
        goal_descriptions = {
            "weight_loss": "—Å–Ω–∏–∂–µ–Ω–∏–∏ –≤–µ—Å–∞",
            "muscle_gain": "–Ω–∞–±–æ—Ä–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
            "maintenance": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã",
            "health_improvement": "—É–ª—É—á—à–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è",
            "energy_boost": "–ø–æ–≤—ã—à–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏",
            "digestive_health": "—É–ª—É—á—à–µ–Ω–∏–∏ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è"
        }

        goal_desc = goal_descriptions.get(preferences.goal, "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π")
        summary_parts.append(f"–í–∞—à–∞ —Ü–µ–ª—å: {goal_desc}")

        # Dietary preferences
        if preferences.dietary_restrictions:
            restrictions_text = ", ".join(preferences.dietary_restrictions)
            summary_parts.append(f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∏—Ç–∞–Ω–∏—è: {restrictions_text}")

        if preferences.allergies:
            allergies_text = ", ".join(preferences.allergies)
            summary_parts.append(f"–ê–ª–ª–µ—Ä–≥–∏–∏: {allergies_text}")

        # Cooking preferences
        skill_descriptions = {
            "beginner": "–ø—Ä–æ—Å—Ç—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã",
            "intermediate": "—Ä–µ—Ü–µ–ø—Ç—ã —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
            "advanced": "—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã",
            "professional": "—Å–ª–æ–∂–Ω—ã–µ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã"
        }

        skill_desc = skill_descriptions.get(preferences.cooking_skill, "–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã")
        summary_parts.append(f"–£—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏: {skill_desc}")

        # Time preferences
        time_descriptions = {
            "minimal": "–±—ã—Å—Ç—Ä—ã–µ –±–ª—é–¥–∞ (10-20 –º–∏–Ω)",
            "moderate": "—É–º–µ—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ (30-45 –º–∏–Ω)",
            "generous": "–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –≥–æ—Ç–æ–≤–∫–∞ (–¥–æ 1.5 —á–∞—Å–æ–≤)",
            "extensive": "–∫—É–ª–∏–Ω–∞—Ä–Ω–æ–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ (1.5+ —á–∞—Å–æ–≤)"
        }

        time_desc = time_descriptions.get(preferences.cooking_time_available, "–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –±–ª—é–¥–∞")
        summary_parts.append(f"–í—Ä–µ–º—è –Ω–∞ –≥–æ—Ç–æ–≤–∫—É: {time_desc}")

        # Meal frequency
        freq_descriptions = {
            "3_meals": "3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
            "5_small": "5-6 –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏",
            "2_meals": "2 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
            "flexible": "–≥–∏–±–∫–∏–π —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è"
        }

        freq_desc = freq_descriptions.get(preferences.eating_frequency, "–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∂–∏–º")
        summary_parts.append(f"–†–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è: {freq_desc}")

        # Activity level
        activity_descriptions = {
            "sedentary": "—Å —É—á–µ—Ç–æ–º —Å–∏–¥—è—á–µ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏",
            "light": "—Å –ª–µ–≥–∫–∏–º–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏",
            "moderate": "—Å —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏",
            "high": "—Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏",
            "athlete": "–¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤"
        }

        activity_desc = activity_descriptions.get(preferences.activity_level, "–ø–æ–¥ –≤–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏")
        summary_parts.append(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_desc}")

        # Calories target
        if preferences.daily_calories_target:
            summary_parts.append(f"–¶–µ–ª–µ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {preferences.daily_calories_target} –∫–∫–∞–ª/–¥–µ–Ω—å")

        return "–°–æ–∑–¥–∞–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è " + ", ".join(summary_parts[:3]) + "."

    def get_adaptive_questions(self, current_responses: List[UserResponse]) -> List[Question]:
        """Get additional questions based on current responses for better personalization"""

        response_map = {resp.question_id: resp.value for resp in current_responses}
        adaptive_questions = []

        # If user has weight loss goal, ask about experience
        if response_map.get("primary_goal") == "weight_loss":
            adaptive_questions.append(
                Question(
                    id="weight_loss_experience",
                    type=QuestionType.SINGLE_CHOICE,
                    title="–ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞?",
                    options=[
                        {"value": "first_time", "label": "–ü–µ—Ä–≤—ã–π —Ä–∞–∑"},
                        {"value": "some_experience", "label": "–ë—ã–ª –æ–ø—ã—Ç"},
                        {"value": "multiple_attempts", "label": "–ú–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫"},
                        {"value": "yo_yo_dieting", "label": "–ô–æ-–π–æ —ç—Ñ—Ñ–µ–∫—Ç"}
                    ]
                )
            )

        # If user has health conditions, ask about medications
        health_conditions = response_map.get("health_conditions", [])
        if isinstance(health_conditions, list) and "none" not in health_conditions:
            adaptive_questions.append(
                Question(
                    id="medications_affecting_nutrition",
                    type=QuestionType.YES_NO,
                    title="–ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ?",
                    description="–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –∞–ø–ø–µ—Ç–∏—Ç –∏–ª–∏ —É—Å–≤–æ–µ–Ω–∏–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤"
                )
            )

        # If user is very active, ask about training schedule
        if response_map.get("activity_level") in ["high", "athlete"]:
            adaptive_questions.append(
                Question(
                    id="training_schedule",
                    type=QuestionType.MULTIPLE_CHOICE,
                    title="–í –∫–∞–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å?",
                    options=[
                        {"value": "monday", "label": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"},
                        {"value": "tuesday", "label": "–í—Ç–æ—Ä–Ω–∏–∫"},
                        {"value": "wednesday", "label": "–°—Ä–µ–¥–∞"},
                        {"value": "thursday", "label": "–ß–µ—Ç–≤–µ—Ä–≥"},
                        {"value": "friday", "label": "–ü—è—Ç–Ω–∏—Ü–∞"},
                        {"value": "saturday", "label": "–°—É–±–±–æ—Ç–∞"},
                        {"value": "sunday", "label": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
                    ]
                )
            )

        return adaptive_questions
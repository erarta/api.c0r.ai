import os
import base64
import json
import httpx
from loguru import logger

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

async def analyze_food_with_gemini(image_bytes: bytes, user_language: str = "en") -> dict:
    """
    Analyze food image using Google Gemini Vision API
    Returns KBZHU data in expected format
    """
    if not GEMINI_API_KEY:
        raise Exception("GEMINI_API_KEY not configured")
    
    try:
        # Encode image to base64
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')
        
        # Create prompt for food analysis based on user language
        if user_language == "ru":
            prompt = """
            –í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.

            –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç. –û–±—Ä–∞—â–∞–π—Ç–µ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
            - –¶–≤–µ—Ç (–∫—Ä–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ü ‚â† –ø–æ–º–∏–¥–æ—Ä, –∑–µ–ª–µ–Ω—ã–π –ø–µ—Ä–µ—Ü ‚â† –æ–≥—É—Ä–µ—Ü, —è–π—Ü–æ ‚â† —Å—ã—Ä)
            - –§–æ—Ä–º—É (–∫—Ä—É–≥–ª–∞—è, –æ–≤–∞–ª—å–Ω–∞—è, –¥–ª–∏–Ω–Ω–∞—è, —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∞—è)
            - –¢–µ–∫—Å—Ç—É—Ä—É (–≥–ª–∞–¥–∫–∞—è, —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–∞—è, –±–ª–µ—Å—Ç—è—â–∞—è, –ø–æ—Ä–∏—Å—Ç–∞—è)
            - –†–∞–∑–º–µ—Ä –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            - –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å (–≥–ª–∞–¥–∫–∞—è —Å–∫–æ—Ä–ª—É–ø–∞ —è–π—Ü–∞ ‚â† –ø–æ—Ä–∏—Å—Ç—ã–π —Å—ã—Ä)

            –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –æ–±—ä–µ–∫—Ç–æ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

            –ó–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞:
            1. –¢–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –í–°–ï –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥–∞
            3. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
            4. –í—ã—á–∏—Å–ª–∏—Ç–µ —Ç–æ—á–Ω—É—é –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
            5. –û–ø–∏—à–∏—Ç–µ –ö–û–ù–ö–†–ï–¢–ù–£–Æ –ø–æ–ª—å–∑—É –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
            6. –î–∞–π—Ç–µ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –±–ª—é–¥–∞
            7. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ö–û–ù–ö–†–ï–¢–ù–´–ï —Å–ø–æ—Å–æ–±—ã —É–ª—É—á—à–µ–Ω–∏—è –±–ª—é–¥–∞

            –í–µ—Ä–Ω–∏—Ç–µ –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç JSON –æ–±—ä–µ–∫—Ç:
            {
                "analysis": {
                    "regional_analysis": {
                        "detected_cuisine_type": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫—É—Ö–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†—É—Å—Å–∫–∞—è, –ê–∑–∏–∞—Ç—Å–∫–∞—è, –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è)",
                        "dish_identification": "–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë—É—Ç–µ—Ä–±—Ä–æ–¥, –°–∞–ª–∞—Ç, –û–≤–æ—â–Ω–æ–µ —Ä–∞–≥—É)",
                        "regional_match_confidence": 0.8
                    },
                    "food_items": [
                        {
                            "name": "—Ç–æ—á–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—Ä–∞—Å–Ω—ã–π –±–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü, –∞ –ù–ï –ø–æ–º–∏–¥–æ—Ä)",
                            "weight_grams": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º–æ–≤,
                            "calories": —á–∏—Å–ª–æ_–∫–∞–ª–æ—Ä–∏–π,
                            "emoji": "–ø–æ–¥—Ö–æ–¥—è—â–∏–π emoji –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ü•ö –¥–ª—è —è–π—Ü–∞, üßÄ –¥–ª—è —Å—ã—Ä–∞, üçÖ –¥–ª—è –ø–æ–º–∏–¥–æ—Ä–∞)",
                            "health_benefits": "–ö–û–ù–ö–†–ï–¢–ù–ê–Ø –ø–æ–ª—å–∑–∞ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö—Ä–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ü –±–æ–≥–∞—Ç –≤–∏—Ç–∞–º–∏–Ω–æ–º –° (120% –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã), –±–µ—Ç–∞-–∫–∞—Ä–æ—Ç–∏–Ω–æ–º –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –≥–ª–∞–∑ –∏ –∫–∞–ø—Å–∞–∏—Ü–∏–Ω–æ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞')"
                        }
                    ],
                    "total_nutrition": {
                        "calories": –æ–±—â–µ–µ_—á–∏—Å–ª–æ_–∫–∞–ª–æ—Ä–∏–π,
                        "proteins": –≥—Ä–∞–º–º—ã_–±–µ–ª–∫–æ–≤,
                        "fats": –≥—Ä–∞–º–º—ã_–∂–∏—Ä–æ–≤,
                        "carbohydrates": –≥—Ä–∞–º–º—ã_—É–≥–ª–µ–≤–æ–¥–æ–≤
                    },
                    "nutritional_summary": {
                        "healthiness_rating": —Ä–µ–π—Ç–∏–Ω–≥_–æ—Ç_1_–¥–æ_10,
                        "key_benefits": [
                            "–ö–û–ù–ö–†–ï–¢–ù–ê–Ø –ø–æ–ª—å–∑–∞ 1 (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞ (30–≥) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–æ—Å—Ç –º—ã—à—Ü')",
                            "–ö–û–ù–ö–†–ï–¢–ù–ê–Ø –ø–æ–ª—å–∑–∞ 2 (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–º–µ–≥–∞-3 –∏–∑ —Ç—É–Ω—Ü–∞ —É–ª—É—á—à–∞—é—Ç —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞')",
                            "–ö–û–ù–ö–†–ï–¢–ù–ê–Ø –ø–æ–ª—å–∑–∞ 3 (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö–ª–µ—Ç—á–∞—Ç–∫–∞ –∏–∑ —Å–∞–ª–∞—Ç–∞ —É–ª—É—á—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ')"
                        ],
                        "recommendations": "–ö–û–ù–ö–†–ï–¢–ù–´–ï —Å–ø–æ—Å–æ–±—ã —É–ª—É—á—à–∏—Ç—å –±–ª—é–¥–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–î–æ–±–∞–≤—å—Ç–µ –∞–≤–æ–∫–∞–¥–æ (+2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã), –∑–∞–º–µ–Ω–∏—Ç–µ –±–µ–ª—ã–π —Ö–ª–µ–± –Ω–∞ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π (+1 –±–∞–ª–ª –∑–∞ –∫–ª–µ—Ç—á–∞—Ç–∫—É), –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏ (+1 –±–∞–ª–ª –∑–∞ –≤–∏—Ç–∞–º–∏–Ω –ö)')"
                    },
                    "motivation_message": "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∫–∞–ª–æ—Ä–∏–π"
                }
            }

            –ü—Ä–∏–º–µ—Ä—ã —Ç–æ—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –∏—Ö –æ—Ç–ª–∏—á–∏–π:
            - ü•ö –Ø–π—Ü–æ: –≥–ª–∞–¥–∫–∞—è —Å–∫–æ—Ä–ª—É–ø–∞, –æ–≤–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞, –±–µ–ª—ã–π/–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ü–≤–µ—Ç
            - üßÄ –°—ã—Ä: –ø–æ—Ä–∏—Å—Ç–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤, –º—è–≥–∫–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏—è
            - üçÖ –ü–æ–º–∏–¥–æ—Ä: –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç, –∫—Ä—É–≥–ª–∞—è —Ñ–æ—Ä–º–∞, –≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∏—Ü–∞
            - üå∂Ô∏è –ö—Ä–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ü: –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç, –≤—ã—Ç—è–Ω—É—Ç–∞—è —Ñ–æ—Ä–º–∞, –≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∏—Ü–∞
            - ü•í –û–≥—É—Ä–µ—Ü: –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç, –≤—ã—Ç—è–Ω—É—Ç–∞—è —Ñ–æ—Ä–º–∞, –±—É–≥—Ä–∏—Å—Ç–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
            - ü•ï –ú–æ—Ä–∫–æ–≤—å: –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç, –≤—ã—Ç—è–Ω—É—Ç–∞—è —Ñ–æ—Ä–º–∞, –≥–ª–∞–¥–∫–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
            - ü•© –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞: –±–µ–ª–æ–µ –º—è—Å–æ, –≤–æ–ª–æ–∫–Ω–∏—Å—Ç–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
            - üêü –õ–æ—Å–æ—Å—å: —Ä–æ–∑–æ–≤–æ–µ –º—è—Å–æ, –∂–∏—Ä–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
            - üçû –•–ª–µ–±: –ø–æ—Ä–∏—Å—Ç–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
            - üçö –†–∏—Å: –º–µ–ª–∫–∏–µ –±–µ–ª—ã–µ –∑–µ—Ä–Ω–∞
            - ü•î –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å: –∫–æ—Ä–∏—á–Ω–µ–≤–∞—è –∫–æ–∂–∏—Ü–∞, –±–µ–ª–∞—è –º—è–∫–æ—Ç—å
            
            –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –†–∞–∑–ª–∏—á–∞–π—Ç–µ –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Ü–≤–µ—Ç—É, —Ñ–æ—Ä–º–µ –∏ —Ç–µ–∫—Å—Ç—É—Ä–µ!
            –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON.
            """
        else:
            prompt = """
            You are an expert in nutritional analysis and food recognition. Analyze this food image with maximum accuracy.

            CRITICALLY IMPORTANT: Very carefully identify each food item. Pay special attention to:
            - Color (red bell pepper ‚â† tomato, green pepper ‚â† cucumber, egg ‚â† cheese)
            - Shape (round, oval, elongated, spherical)
            - Texture (smooth, rough, shiny, porous)
            - Size and context
            - Surface (smooth eggshell ‚â† porous cheese)

            IMPORTANT: Respond with ONLY a valid JSON object, no additional text.

            Analysis tasks:
            1. Accurately identify ALL food items in the image
            2. Determine regional dish origin
            3. Calculate weight of each item in grams
            4. Compute precise nutritional values
            5. Describe SPECIFIC health benefits of each ingredient
            6. Provide overall healthiness assessment
            7. Suggest SPECIFIC ways to improve the dish

            Return ONLY this JSON object:
            {
                "analysis": {
                    "regional_analysis": {
                        "detected_cuisine_type": "cuisine type (e.g., Mediterranean, Asian, American)",
                        "dish_identification": "dish name (e.g., Sandwich, Salad, Vegetable Stir-fry)",
                        "regional_match_confidence": 0.8
                    },
                    "food_items": [
                        {
                            "name": "precise food name (e.g., red bell pepper, NOT tomato)",
                            "weight_grams": weight_number,
                            "calories": calorie_number,
                            "emoji": "appropriate emoji for the food item (e.g., ü•ö for egg, üßÄ for cheese, üçÖ for tomato)",
                            "health_benefits": "SPECIFIC health benefits of this product (e.g., 'Red bell pepper is rich in vitamin C (120% daily value), beta-carotene for eye health, and capsaicin to boost metabolism')"
                        }
                    ],
                    "total_nutrition": {
                        "calories": total_calorie_number,
                        "proteins": protein_grams,
                        "fats": fat_grams,
                        "carbohydrates": carb_grams
                    },
                    "nutritional_summary": {
                        "healthiness_rating": rating_from_1_to_10,
                        "key_benefits": [
                            "SPECIFIC benefit 1 (e.g., 'High protein content (30g) supports muscle growth')",
                            "SPECIFIC benefit 2 (e.g., 'Omega-3 from tuna improves brain function')",
                            "SPECIFIC benefit 3 (e.g., 'Fiber from lettuce aids digestion')"
                        ],
                        "recommendations": "SPECIFIC ways to improve the dish for higher rating (e.g., 'Add avocado (+2 points for healthy fats), replace white bread with whole grain (+1 point for fiber), add cherry tomatoes (+1 point for vitamin K)')"
                    },
                    "motivation_message": "Positive motivational message about healthy eating and calorie tracking"
                }
            }

            Examples of precise names and their differences:
            - ü•ö Egg: smooth shell, oval shape, white/brown color
            - üßÄ Cheese: porous texture, can be different colors, soft consistency
            - üçÖ Tomato: red color, round shape, smooth skin
            - üå∂Ô∏è Red bell pepper: red color, elongated shape, smooth skin
            - ü•í Cucumber: green color, elongated shape, bumpy surface
            - ü•ï Carrot: orange color, elongated shape, smooth surface
            - ü•© Chicken breast: white meat, fibrous texture
            - üêü Salmon: pink meat, fatty texture
            - üçû Bread: porous texture, can be different colors
            - üçö Rice: small white grains
            - ü•î Potato: brown skin, white flesh

            MANDATORY: Distinguish similar products by color, shape, and texture!
            DO NOT add any text before or after the JSON.
            """
        
        # Prepare request payload for Gemini
        payload = {
            "contents": [
                {
                    "parts": [
                        {"text": prompt},
                        {
                            "inline_data": {
                                "mime_type": "image/jpeg",
                                "data": image_base64
                            }
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.1,
                "maxOutputTokens": 300
            }
        }
        
        # Call Gemini API
        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"
        
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(url, json=payload)
            
            if response.status_code != 200:
                logger.error(f"Gemini API error: {response.status_code} - {response.text}")
                raise Exception(f"Gemini API error: {response.status_code}")
            
            result = response.json()
            
            # Extract text from response
            if "candidates" in result and len(result["candidates"]) > 0:
                content = result["candidates"][0]["content"]["parts"][0]["text"].strip()
            else:
                raise Exception("Invalid response from Gemini API")
            
            # Parse JSON response
            try:
                response_data = json.loads(content)
                logger.info(f"Gemini analysis successful: {response_data}")
                
                # Check if we have the new analysis format
                if "analysis" in response_data:
                    # New format - return as is
                    return response_data
                else:
                    # Old format fallback - convert to new structure
                    kbzhu_data = response_data.get("total_nutrition", response_data)
                    
                    # Validate required fields
                    required_fields = ["calories", "proteins", "fats", "carbohydrates"]
                    for field in required_fields:
                        if field not in kbzhu_data:
                            raise ValueError(f"Missing field: {field}")
                        # Ensure values are numbers
                        kbzhu_data[field] = float(kbzhu_data[field])
                    
                    # Convert old format to new format structure
                    result = {
                        "analysis": {
                            "food_items": response_data.get("food_items", []),
                            "total_nutrition": kbzhu_data,
                            "motivation_message": "Keep tracking your nutrition!"
                        }
                    }
                    return result
                    
            except json.JSONDecodeError as e:
                logger.error(f"Failed to parse Gemini response as JSON: {content}")
                raise Exception(f"Invalid JSON response from Gemini: {e}")
                
    except Exception as e:
        logger.error(f"Gemini analysis error: {e}")
        raise Exception(f"Gemini analysis failed: {str(e)}")

async def analyze_image_gemini(image_url: str) -> dict:
    # Legacy function - redirect to new implementation
    return await analyze_food_with_gemini(image_url.encode(), "en") 
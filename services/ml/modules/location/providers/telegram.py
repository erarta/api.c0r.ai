"""
Telegram Location Provider for c0r.AI ML Service
Location detection through Telegram Bot API
"""

import asyncio
from typing import Optional
import httpx
from loguru import logger

from ..models import LocationInfo, DetectionMethod, DetectionConfidence
from ....core.models.config.environment_config import EnvironmentConfig


class TelegramLocationProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram API"""
    
    def __init__(self):
        self.bot_token = EnvironmentConfig.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}" if self.bot_token else None
        self.timeout = 10
    
    async def get_location(self, telegram_user_id: str) -> Optional[LocationInfo]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        
        Args:
            telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            LocationInfo –∏–ª–∏ None –µ—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        """
        if not self.bot_token:
            logger.warning("ü§ñ Telegram bot token not configured")
            return None
        
        try:
            logger.debug(f"üîç Checking Telegram location for user {telegram_user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await self._get_user_info(telegram_user_id)
            if not user_info:
                logger.debug(f"‚ùå No user info found for {telegram_user_id}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
            location_data = await self._get_recent_location_messages(telegram_user_id)
            if location_data:
                logger.info(f"‚úÖ Found Telegram location for user {telegram_user_id}")
                return self._create_location_info(location_data, user_info)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            profile_location = await self._get_profile_location(telegram_user_id)
            if profile_location:
                logger.info(f"‚úÖ Found Telegram profile location for user {telegram_user_id}")
                return self._create_location_info(profile_location, user_info)
            
            logger.debug(f"‚ùå No location data found in Telegram for user {telegram_user_id}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Telegram location error for user {telegram_user_id}: {e}")
            return None
    
    async def _get_user_info(self, telegram_user_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(
                    f"{self.base_url}/getChat",
                    params={"chat_id": telegram_user_id}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("ok"):
                        return data.get("result")
                
                logger.debug(f"‚ùå Failed to get user info: {response.status_code}")
                return None
                
        except Exception as e:
            logger.debug(f"‚ùå Error getting user info: {e}")
            return None
    
    async def _get_recent_location_messages(self, telegram_user_id: str) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
        
        Note: –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook –∏–ª–∏ 
        —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ Bot API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç 
        –ø–æ–ª—É—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é
        """
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏–∏
            # –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫—ç—à–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ webhook
            
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            logger.debug(f"üîç Checking saved location data for user {telegram_user_id}")
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏–∏
            # saved_location = await self._get_saved_location_from_db(telegram_user_id)
            # return saved_location
            
            return None
            
        except Exception as e:
            logger.debug(f"‚ùå Error getting recent location messages: {e}")
            return None
    
    async def _get_profile_location(self, telegram_user_id: str) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Note: Telegram Bot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
        """
        # Telegram Bot API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π API
        return None
    
    def _create_location_info(self, location_data: dict, user_info: dict) -> LocationInfo:
        """–°–æ–∑–¥–∞–Ω–∏–µ LocationInfo –∏–∑ –¥–∞–Ω–Ω—ã—Ö Telegram"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        latitude = location_data.get("latitude")
        longitude = location_data.get("longitude")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –∏ —Ä–µ–≥–∏–æ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        country_code, country_name, region = self._coordinates_to_location(latitude, longitude)
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        city = None
        if user_info and "location" in user_info:
            city = user_info["location"]
        
        return LocationInfo(
            country_code=country_code,
            country_name=country_name,
            region=region,
            city=city,
            timezone=None,  # Telegram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç timezone
            latitude=latitude,
            longitude=longitude,
            confidence=DetectionConfidence.HIGH,
            detection_method=DetectionMethod.TELEGRAM_API
        )
    
    def _coordinates_to_location(self, latitude: float, longitude: float) -> tuple:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        
        –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reverse geocoding API
        """
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        if 41 <= latitude <= 82 and 19 <= longitude <= 180:
            if 55 <= latitude <= 70 and 30 <= longitude <= 180:
                return "RU", "Russia", "Central Russia"
            elif 45 <= latitude <= 55 and 2 <= longitude <= 40:
                return "DE", "Germany", "Central Europe"
        elif 24 <= latitude <= 49 and -125 <= longitude <= -66:
            return "US", "United States", "North America"
        elif 35 <= latitude <= 71 and -10 <= longitude <= 40:
            return "FR", "France", "Western Europe"
        elif 35 <= latitude <= 47 and 6 <= longitude <= 19:
            return "IT", "Italy", "Southern Europe"
        elif 30 <= latitude <= 46 and 129 <= longitude <= 146:
            return "JP", "Japan", "East Asia"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "UNKNOWN", "Unknown", "Unknown Region"
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API"""
        if not self.bot_token:
            return False
        
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(f"{self.base_url}/getMe")
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("ok"):
                        logger.info(f"‚úÖ Telegram API connection successful: {data['result']['username']}")
                        return True
                
                logger.warning(f"‚ùå Telegram API connection failed: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Telegram API connection error: {e}")
            return False
    
    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return bool(self.bot_token)
    
    async def save_location_from_webhook(self, telegram_user_id: str, location_data: dict):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ webhook
        
        Args:
            telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            location_data: –î–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫—ç—à
            logger.info(f"üìç Saving location data for user {telegram_user_id}")
            
            # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:
            location_record = {
                "user_id": telegram_user_id,
                "latitude": location_data.get("latitude"),
                "longitude": location_data.get("longitude"),
                "timestamp": location_data.get("date"),
                "live_period": location_data.get("live_period"),
                "heading": location_data.get("heading"),
                "proximity_alert_radius": location_data.get("proximity_alert_radius")
            }
            
            # await self._save_to_database(location_record)
            logger.debug(f"üìç Location data prepared for saving: {location_record}")
            
        except Exception as e:
            logger.error(f"‚ùå Error saving location data: {e}")
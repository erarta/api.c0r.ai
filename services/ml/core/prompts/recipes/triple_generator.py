"""
Triple Recipe Generation System for c0r.AI ML Service
Generates three ranked recipes based on user preferences and regional context
"""

from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime
from loguru import logger

# Location models removed - using language-based region detection instead

# Simple stub for RegionalContext
class RegionalContext:
    """Simple stub for RegionalContext"""
    def __init__(self, region_code: str = "INTL"):
        self.region_code = region_code
        self.common_products = []
        self.cooking_methods = []
        self.measurement_units = "metric"


class TripleRecipeGenerator:
    """–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ—Ö —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    
    def __init__(self):
        self.recipe_templates = self._load_recipe_templates()
        self.ranking_weights = self._load_ranking_weights()
        self.difficulty_levels = self._load_difficulty_levels()
        
        logger.info("üë®‚Äçüç≥ TripleRecipeGenerator initialized")
    
    def generate_recipe_ranking_context(self, 
                                      user_profile: Dict[str, Any],
                                      regional_context: RegionalContext,
                                      recognized_ingredients: List[str]) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
        
        Args:
            user_profile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            regional_context: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            recognized_ingredients: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            
        Returns:
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
        """
        logger.debug("üéØ Generating recipe ranking context")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        user_preferences = self._analyze_user_preferences(user_profile)
        
        # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
        regional_adaptation = self._get_regional_adaptation(regional_context)
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        ingredient_availability = self._analyze_ingredient_availability(
            recognized_ingredients, regional_context
        )
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        complexity_preferences = self._determine_complexity_preferences(user_profile)
        
        return {
            "user_preferences": user_preferences,
            "regional_adaptation": regional_adaptation,
            "ingredient_availability": ingredient_availability,
            "complexity_preferences": complexity_preferences,
            "ranking_criteria": self._get_ranking_criteria(user_profile, regional_context)
        }
    
    def calculate_recipe_suitability_score(self, 
                                         recipe_type: str,
                                         user_profile: Dict[str, Any],
                                         regional_context: RegionalContext,
                                         ingredient_match_score: float) -> int:
        """
        –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            recipe_type: –¢–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞ (personal, traditional, creative)
            user_profile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            regional_context: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            ingredient_match_score: –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            
        Returns:
            –û—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 100
        """
        logger.debug(f"üìä Calculating suitability score for {recipe_type}")
        
        base_score = 50  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        
        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        type_weights = {
            "personal": {
                "dietary_match": 0.3,
                "goal_alignment": 0.25,
                "difficulty_match": 0.2,
                "ingredient_availability": 0.15,
                "cultural_preference": 0.1
            },
            "traditional": {
                "cultural_authenticity": 0.35,
                "ingredient_availability": 0.25,
                "dietary_match": 0.2,
                "difficulty_match": 0.1,
                "seasonal_relevance": 0.1
            },
            "creative": {
                "innovation_appeal": 0.3,
                "ingredient_creativity": 0.25,
                "dietary_match": 0.2,
                "difficulty_challenge": 0.15,
                "fusion_interest": 0.1
            }
        }
        
        weights = type_weights.get(recipe_type, type_weights["personal"])
        
        # –†–∞—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏
        dietary_score = self._calculate_dietary_match_score(user_profile)
        goal_score = self._calculate_goal_alignment_score(user_profile, recipe_type)
        difficulty_score = self._calculate_difficulty_match_score(user_profile, recipe_type)
        cultural_score = self._calculate_cultural_preference_score(user_profile, regional_context)
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        if recipe_type == "traditional":
            authenticity_score = self._calculate_authenticity_score(regional_context)
            seasonal_score = self._calculate_seasonal_relevance_score(regional_context)
            
            total_score = (
                base_score +
                (dietary_score * weights["dietary_match"]) +
                (authenticity_score * weights["cultural_authenticity"]) +
                (ingredient_match_score * weights["ingredient_availability"]) +
                (difficulty_score * weights["difficulty_match"]) +
                (seasonal_score * weights["seasonal_relevance"])
            )
        
        elif recipe_type == "creative":
            innovation_score = self._calculate_innovation_appeal_score(user_profile)
            creativity_score = self._calculate_ingredient_creativity_score(user_profile)
            fusion_score = self._calculate_fusion_interest_score(user_profile, regional_context)
            
            total_score = (
                base_score +
                (innovation_score * weights["innovation_appeal"]) +
                (creativity_score * weights["ingredient_creativity"]) +
                (dietary_score * weights["dietary_match"]) +
                (difficulty_score * weights["difficulty_challenge"]) +
                (fusion_score * weights["fusion_interest"])
            )
        
        else:  # personal
            total_score = (
                base_score +
                (dietary_score * weights["dietary_match"]) +
                (goal_score * weights["goal_alignment"]) +
                (difficulty_score * weights["difficulty_match"]) +
                (ingredient_match_score * weights["ingredient_availability"]) +
                (cultural_score * weights["cultural_preference"])
            )
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-100
        final_score = max(0, min(100, int(total_score)))
        
        logger.debug(f"üìà Final suitability score for {recipe_type}: {final_score}")
        
        return final_score
    
    def get_recipe_type_descriptions(self, language: str = "ru") -> Dict[str, Dict[str, str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π —Ç–∏–ø–æ–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        
        Args:
            language: –Ø–∑—ã–∫ –æ–ø–∏—Å–∞–Ω–∏–π
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ç–∏–ø–æ–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        """
        if language == "ru":
            return {
                "personal": {
                    "title": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç",
                    "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —Ü–µ–ª–∏",
                    "focus": "–£—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, —Ü–µ–ª–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏"
                },
                "traditional": {
                    "title": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç",
                    "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ—Ü–µ–ø—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫—É—Ö–Ω–∏",
                    "focus": "–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å"
                },
                "creative": {
                    "title": "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç",
                    "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–ª–∏ —Ñ—å—é–∂–Ω",
                    "focus": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏, –Ω–µ–æ–±—ã—á–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥"
                }
            }
        else:
            return {
                "personal": {
                    "title": "Personal Recipe",
                    "description": "Maximally adapted to your preferences and goals",
                    "focus": "Considers dietary restrictions, goals and cooking level"
                },
                "traditional": {
                    "title": "Traditional Recipe",
                    "description": "Classic regional cuisine recipe",
                    "focus": "Authenticity, cultural traditions, seasonality"
                },
                "creative": {
                    "title": "Creative Recipe",
                    "description": "Modern interpretation or fusion",
                    "focus": "Innovation, unusual combinations, creative approach"
                }
            }
    
    def get_cooking_tips_for_region(self, 
                                  regional_context: RegionalContext,
                                  language: str = "ru") -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –≥–æ—Ç–æ–≤–∫–µ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
        
        Args:
            regional_context: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            language: –Ø–∑—ã–∫ —Å–æ–≤–µ—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –≥–æ—Ç–æ–≤–∫–µ
        """
        logger.debug(f"üí° Getting cooking tips for {regional_context.region_code}")
        
        region_tips = {
            "RU": {
                "ru": [
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—É–≥—É–Ω–Ω—É—é –ø–æ—Å—É–¥—É –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞",
                    "–î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–µ–ª–µ–Ω—å –≤ –∫–æ–Ω—Ü–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤",
                    "–°–æ–ª–∏—Ç–µ –º—è—Å–æ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∫—É—Å–∞",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–µ—Ç–∞–Ω—É –¥–ª—è —Å–º—è–≥—á–µ–Ω–∏—è –∫–∏—Å–ª—ã—Ö –±–ª—é–¥"
                ],
                "en": [
                    "Use cast iron cookware for better heating",
                    "Add herbs at the end of cooking to preserve vitamins",
                    "Salt meat 30 minutes before cooking for better flavor",
                    "Use sour cream to soften acidic dishes"
                ]
            },
            "US": {
                "ru": [
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ä–Ω—ã–µ —á–∞—à–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏",
                    "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞–π—Ç–µ –¥—É—Ö–æ–≤–∫—É",
                    "–ú–∞—Ä–∏–Ω—É–π—Ç–µ –º—è—Å–æ –¥–ª—è —Å–æ—á–Ω–æ—Å—Ç–∏",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä –¥–ª—è –º—è—Å–∞"
                ],
                "en": [
                    "Use measuring cups for accuracy",
                    "Preheat the oven beforehand",
                    "Marinate meat for juiciness",
                    "Use a meat thermometer"
                ]
            },
            "IT": {
                "ru": [
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
                    "–ù–µ –ø–µ—Ä–µ–≤–∞—Ä–∏–≤–∞–π—Ç–µ –ø–∞—Å—Ç—É - al dente –ª—É—á—à–µ –≤—Å–µ–≥–æ",
                    "–î–æ–±–∞–≤–ª—è–π—Ç–µ –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ –≤ –∫–æ–Ω—Ü–µ",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–∏–µ —Ç—Ä–∞–≤—ã"
                ],
                "en": [
                    "Use only quality ingredients",
                    "Don't overcook pasta - al dente is best",
                    "Add olive oil at the end",
                    "Use fresh herbs"
                ]
            }
        }
        
        tips = region_tips.get(regional_context.region_code, {}).get(language, [])
        
        if not tips:
            # –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã
            if language == "ru":
                tips = [
                    "–ß–∏—Ç–∞–π—Ç–µ —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º",
                    "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ",
                    "–ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –¥—É—Ö–æ–≤–∫—É –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
                    "–ü—Ä–æ–±—É–π—Ç–µ –±–ª—é–¥–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–æ—Ç–æ–≤–∫–∏"
                ]
            else:
                tips = [
                    "Read the recipe completely before starting",
                    "Prepare all ingredients in advance",
                    "Don't open the oven unnecessarily",
                    "Taste the dish while cooking"
                ]
        
        return tips
    
    def _analyze_user_preferences(self, user_profile: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        
        preferences = {
            "dietary_restrictions": user_profile.get("dietary_preferences", []),
            "allergies": user_profile.get("allergies", []),
            "cooking_level": user_profile.get("cooking_level", "beginner"),
            "goal": user_profile.get("goal", "maintain_weight"),
            "preferred_cuisines": user_profile.get("preferred_cuisines", []),
            "time_constraints": user_profile.get("available_cooking_time", "medium")
        }
        
        return preferences
    
    def _get_regional_adaptation(self, regional_context: RegionalContext) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        
        return {
            "cuisine_types": regional_context.cuisine_types,
            "common_products": regional_context.common_products[:10],
            "cooking_methods": regional_context.cooking_methods[:5],
            "measurement_units": regional_context.measurement_units,
            "cultural_notes": regional_context.food_culture_notes
        }
    
    def _analyze_ingredient_availability(self, 
                                       ingredients: List[str],
                                       regional_context: RegionalContext) -> Dict[str, str]:
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
        
        availability = {}
        common_products = [p.lower() for p in regional_context.common_products]
        
        for ingredient in ingredients:
            ingredient_lower = ingredient.lower()
            
            if any(product in ingredient_lower for product in common_products):
                availability[ingredient] = "easily_available"
            elif self._is_seasonal_ingredient(ingredient, regional_context):
                availability[ingredient] = "seasonal"
            else:
                availability[ingredient] = "specialty_store"
        
        return availability
    
    def _determine_complexity_preferences(self, user_profile: Dict[str, Any]) -> Dict[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        
        cooking_level = user_profile.get("cooking_level", "beginner")
        available_time = user_profile.get("available_cooking_time", "medium")
        
        complexity_map = {
            "beginner": {
                "short": "very_easy",
                "medium": "easy",
                "long": "easy"
            },
            "intermediate": {
                "short": "easy",
                "medium": "medium",
                "long": "medium"
            },
            "advanced": {
                "short": "medium",
                "medium": "medium",
                "long": "hard"
            }
        }
        
        preferred_complexity = complexity_map.get(cooking_level, {}).get(available_time, "easy")
        
        return {
            "preferred_complexity": preferred_complexity,
            "max_prep_time": self._get_max_prep_time(available_time),
            "max_cook_time": self._get_max_cook_time(available_time)
        }
    
    def _get_ranking_criteria(self, 
                            user_profile: Dict[str, Any],
                            regional_context: RegionalContext) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –ë–∞–∑–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        criteria = {
            "dietary_compatibility": 0.25,
            "ingredient_availability": 0.20,
            "difficulty_match": 0.15,
            "cultural_relevance": 0.15,
            "nutritional_value": 0.15,
            "innovation_factor": 0.10
        }
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_profile.get("goal") == "lose_weight":
            criteria["nutritional_value"] += 0.1
            criteria["innovation_factor"] -= 0.05
        
        if user_profile.get("cooking_level") == "advanced":
            criteria["innovation_factor"] += 0.1
            criteria["difficulty_match"] -= 0.05
        
        return criteria
    
    def _calculate_dietary_match_score(self, user_profile: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        
        dietary_prefs = user_profile.get("dietary_preferences", [])
        allergies = user_profile.get("allergies", [])
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        score = 20.0
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
        if "vegetarian" in dietary_prefs:
            score += 10
        if "healthy" in dietary_prefs:
            score += 8
        if "low_carb" in dietary_prefs:
            score += 6
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ (–±—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ—Ü–µ–ø—Ç–µ)
        if allergies and len(allergies) > 0:
            score -= 2 * len([a for a in allergies if a != "none"])
        
        return max(0, score)
    
    def _calculate_goal_alignment_score(self, user_profile: Dict[str, Any], recipe_type: str) -> float:
        """–†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        goal = user_profile.get("goal", "maintain_weight")
        
        goal_scores = {
            "lose_weight": {
                "personal": 25,
                "traditional": 15,
                "creative": 20
            },
            "gain_weight": {
                "personal": 25,
                "traditional": 20,
                "creative": 15
            },
            "maintain_weight": {
                "personal": 20,
                "traditional": 20,
                "creative": 20
            }
        }
        
        return goal_scores.get(goal, {}).get(recipe_type, 15)
    
    def _calculate_difficulty_match_score(self, user_profile: Dict[str, Any], recipe_type: str) -> float:
        """–†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        
        cooking_level = user_profile.get("cooking_level", "beginner")
        
        level_scores = {
            "beginner": {
                "personal": 25,
                "traditional": 20,
                "creative": 10
            },
            "intermediate": {
                "personal": 20,
                "traditional": 25,
                "creative": 20
            },
            "advanced": {
                "personal": 15,
                "traditional": 20,
                "creative": 25
            }
        }
        
        return level_scores.get(cooking_level, {}).get(recipe_type, 15)
    
    def _calculate_cultural_preference_score(self, 
                                           user_profile: Dict[str, Any],
                                           regional_context: RegionalContext) -> float:
        """–†–∞—Å—á–µ—Ç –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        
        preferred_cuisines = user_profile.get("preferred_cuisines", [])
        regional_cuisines = regional_context.cuisine_types
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        score = 10.0
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–º–∏ –∫—É—Ö–Ω—è–º–∏
        for cuisine in preferred_cuisines:
            if any(cuisine.lower() in rc.lower() for rc in regional_cuisines):
                score += 8
        
        return score
    
    def _calculate_authenticity_score(self, regional_context: RegionalContext) -> float:
        """–†–∞—Å—á–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
        base_score = 20.0
        
        # –ë–æ–Ω—É—Å –∑–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π
        if len(regional_context.cuisine_types) > 2:
            base_score += 5
        
        if regional_context.food_culture_notes:
            base_score += 5
        
        return base_score
    
    def _calculate_seasonal_relevance_score(self, regional_context: RegionalContext) -> float:
        """–†–∞—Å—á–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
        
        current_month = datetime.now().month
        
        if current_month in [3, 4, 5]:
            season = "spring"
        elif current_month in [6, 7, 8]:
            season = "summer"
        elif current_month in [9, 10, 11]:
            season = "autumn"
        else:
            season = "winter"
        
        seasonal_products = regional_context.seasonal_products.get(season, [])
        
        # –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        return min(20.0, len(seasonal_products) * 2)
    
    def _calculate_innovation_appeal_score(self, user_profile: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π"""
        
        cooking_level = user_profile.get("cooking_level", "beginner")
        
        innovation_scores = {
            "beginner": 10,
            "intermediate": 20,
            "advanced": 30
        }
        
        return innovation_scores.get(cooking_level, 15)
    
    def _calculate_ingredient_creativity_score(self, user_profile: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        base_score = 15.0
        
        # –ë–æ–Ω—É—Å –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–≤–∞—Ä–æ–≤
        if user_profile.get("cooking_level") == "advanced":
            base_score += 10
        
        return base_score
    
    def _calculate_fusion_interest_score(self, 
                                       user_profile: Dict[str, Any],
                                       regional_context: RegionalContext) -> float:
        """–†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ñ—å—é–∂–Ω –∫—É—Ö–Ω–µ"""
        
        preferred_cuisines = user_profile.get("preferred_cuisines", [])
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        score = 10.0
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        if len(preferred_cuisines) > 2:
            score += 8
        
        # –ë–æ–Ω—É—Å –∑–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        international_cuisines = ["asian", "mediterranean", "mexican", "indian"]
        if any(cuisine in preferred_cuisines for cuisine in international_cuisines):
            score += 5
        
        return score
    
    def _is_seasonal_ingredient(self, ingredient: str, regional_context: RegionalContext) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"""
        
        current_month = datetime.now().month
        
        if current_month in [3, 4, 5]:
            season = "spring"
        elif current_month in [6, 7, 8]:
            season = "summer"
        elif current_month in [9, 10, 11]:
            season = "autumn"
        else:
            season = "winter"
        
        seasonal_products = regional_context.seasonal_products.get(season, [])
        
        return any(ingredient.lower() in product.lower() for product in seasonal_products)
    
    def _get_max_prep_time(self, available_time: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"""
        
        time_map = {
            "short": "15 –º–∏–Ω—É—Ç",
            "medium": "30 –º–∏–Ω—É—Ç",
            "long": "60 –º–∏–Ω—É—Ç"
        }
        
        return time_map.get(available_time, "30 –º–∏–Ω—É—Ç")
    
    def _get_max_cook_time(self, available_time: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏"""
        
        time_map = {
            "short": "30 –º–∏–Ω—É—Ç",
            "medium": "60 –º–∏–Ω—É—Ç",
            "long": "120 –º–∏–Ω—É—Ç"
        }
        
        return time_map.get(available_time, "60 –º–∏–Ω—É—Ç")
    
    def _load_recipe_templates(self) -> Dict[str, Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        return {
            "personal": {
                "focus": "user_preferences",
                "adaptability": "high",
                "complexity": "variable"
            },
            "traditional": {
                "focus": "authenticity",
                "adaptability": "low",
                "complexity": "medium"
            },
            "creative": {
                "focus": "innovation",
                "adaptability": "high",
                "complexity": "high"
            }
        }
    
    def _load_ranking_weights(self) -> Dict[str, float]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            "dietary_match": 0.25,
            "ingredient_availability": 0.20,
            "difficulty_suitability": 0.15,
            "cultural_relevance": 0.15,
            "nutritional_value": 0.15,
            "creativity_factor": 0.10
        }
    
    def _load_difficulty_levels(self) -> Dict[str, Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        return {
            "very_easy": {
                "max_prep_time": 10,
                "max_cook_time": 20,
                "max_ingredients": 5,
                "techniques": ["basic"]
            },
            "easy": {
                "max_prep_time": 20,
                "max_cook_time": 40,
                "max_ingredients": 8,
                "techniques": ["basic", "simple"]
            },
            "medium": {
                "max_prep_time": 40,
                "max_cook_time": 80,
                "max_ingredients": 12,
                "techniques": ["basic", "intermediate"]
            },
            "hard": {
                "max_prep_time": 60,
                "max_cook_time": 120,
                "max_ingredients": 15,
                "techniques": ["advanced", "complex"]
            }
        }
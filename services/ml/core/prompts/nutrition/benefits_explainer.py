"""
Nutrition Benefits Explanation System for c0r.AI ML Service
Provides detailed health benefits explanations for food products
"""

from typing import Dict, List, Optional, Tuple
from loguru import logger


class NutritionBenefitsExplainer:
    """–°–∏—Å—Ç–µ–º–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è"""
    
    def __init__(self):
        self.benefits_database = self._load_benefits_database()
        self.nutrient_functions = self._load_nutrient_functions()
        self.health_conditions_map = self._load_health_conditions_map()
        
        logger.info("üíö NutritionBenefitsExplainer initialized")
    
    def explain_food_benefits(self, 
                            food_name: str, 
                            language: str = "ru",
                            user_goals: Optional[List[str]] = None) -> Dict[str, str]:
        """
        –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        
        Args:
            food_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            language: –Ø–∑—ã–∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            user_goals: –¶–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã –∏ —Ç.–¥.)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑—ã
        """
        logger.debug(f"üí° Explaining benefits for {food_name} in {language}")
        
        food_lower = food_name.lower()
        benefits = {}
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        product_benefits = self._find_product_benefits(food_lower, language)
        
        if product_benefits:
            benefits.update(product_benefits)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π
        if user_goals:
            personalized_benefits = self._get_personalized_benefits(
                food_lower, user_goals, language
            )
            if personalized_benefits:
                benefits["personalized_advice"] = personalized_benefits
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
        if not benefits:
            benefits = self._get_general_benefits(food_lower, language)
        
        return benefits
    
    def explain_nutrient_benefits(self, 
                                nutrient_name: str, 
                                amount: float,
                                language: str = "ru") -> str:
        """
        –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞
        
        Args:
            nutrient_name: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö/–º–≥
            language: –Ø–∑—ã–∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            
        Returns:
            –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑—ã –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞
        """
        logger.debug(f"üß¨ Explaining nutrient {nutrient_name}: {amount}")
        
        nutrient_data = self.nutrient_functions.get(nutrient_name.lower(), {})
        
        if not nutrient_data:
            return self._get_default_nutrient_explanation(nutrient_name, language)
        
        explanation_template = nutrient_data.get(language, nutrient_data.get("en", ""))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
        amount_context = self._get_amount_context(nutrient_name, amount, language)
        
        return f"{explanation_template} {amount_context}"
    
    def get_meal_balance_advice(self, 
                              nutrition_data: Dict[str, float],
                              language: str = "ru") -> str:
        """
        –°–æ–≤–µ—Ç—ã –ø–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –±–ª—é–¥–∞
        
        Args:
            nutrition_data: –î–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã)
            language: –Ø–∑—ã–∫ —Å–æ–≤–µ—Ç–æ–≤
            
        Returns:
            –°–æ–≤–µ—Ç—ã –ø–æ –±–∞–ª–∞–Ω—Å—É –ø–∏—Ç–∞–Ω–∏—è
        """
        logger.debug("‚öñÔ∏è Analyzing meal balance")
        
        proteins = nutrition_data.get("proteins", 0)
        fats = nutrition_data.get("fats", 0)
        carbs = nutrition_data.get("carbohydrates", 0)
        calories = nutrition_data.get("calories", 0)
        
        if calories == 0:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞" if language == "ru" else "Insufficient data for analysis"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£
        protein_percent = (proteins * 4 / calories) * 100
        fat_percent = (fats * 9 / calories) * 100
        carb_percent = (carbs * 4 / calories) * 100
        
        advice_parts = []
        
        # –ê–Ω–∞–ª–∏–∑ –±–µ–ª–∫–æ–≤
        if protein_percent < 15:
            if language == "ru":
                advice_parts.append("ü•© –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –±–µ–ª–∫–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –Ω–∞—Å—ã—â–µ–Ω–∏—è")
            else:
                advice_parts.append("ü•© Consider adding more protein sources for better satiety")
        elif protein_percent > 35:
            if language == "ru":
                advice_parts.append("‚öñÔ∏è –ú–Ω–æ–≥–æ –±–µ–ª–∫–∞ - –æ—Ç–ª–∏—á–Ω–æ –¥–ª—è –º—ã—à—Ü, –Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º")
            else:
                advice_parts.append("‚öñÔ∏è High protein content - great for muscles, but watch the balance")
        
        # –ê–Ω–∞–ª–∏–∑ –∂–∏—Ä–æ–≤
        if fat_percent < 20:
            if language == "ru":
                advice_parts.append("ü•ë –ü–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã –ø–æ–º–æ–≥—É—Ç —É—Å–≤–æ–µ–Ω–∏—é –≤–∏—Ç–∞–º–∏–Ω–æ–≤")
            else:
                advice_parts.append("ü•ë Healthy fats would help vitamin absorption")
        elif fat_percent > 40:
            if language == "ru":
                advice_parts.append("üî• –í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∏—Ä–æ–≤ - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±—â–µ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é")
            else:
                advice_parts.append("üî• High fat content - monitor total calorie intake")
        
        # –ê–Ω–∞–ª–∏–∑ —É–≥–ª–µ–≤–æ–¥–æ–≤
        if carb_percent < 30:
            if language == "ru":
                advice_parts.append("‚ö° –£–≥–ª–µ–≤–æ–¥—ã –¥–∞–¥—É—Ç —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            else:
                advice_parts.append("‚ö° Carbohydrates would provide energy for activity")
        elif carb_percent > 60:
            if language == "ru":
                advice_parts.append("üåæ –ú–Ω–æ–≥–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ - —Ö–æ—Ä–æ—à–æ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏, –Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∞—Ö–∞—Ä–æ–º")
            else:
                advice_parts.append("üåæ High carb content - good for energy, but watch sugar levels")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if 15 <= protein_percent <= 25 and 25 <= fat_percent <= 35 and 40 <= carb_percent <= 55:
            if language == "ru":
                advice_parts.insert(0, "‚úÖ –û—Ç–ª–∏—á–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ!")
            else:
                advice_parts.insert(0, "‚úÖ Excellently balanced meal!")
        
        return " ".join(advice_parts) if advice_parts else (
            "–•–æ—Ä–æ—à–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ" if language == "ru" else "Well-balanced meal"
        )
    
    def get_seasonal_benefits(self, 
                            food_name: str, 
                            season: str,
                            language: str = "ru") -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–Ω–æ–π –ø–æ–ª—å–∑–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        
        Args:
            food_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            season: –°–µ–∑–æ–Ω (spring, summer, autumn, winter)
            language: –Ø–∑—ã–∫
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–Ω–æ–π –ø–æ–ª—å–∑–µ
        """
        seasonal_benefits = {
            "ru": {
                "spring": {
                    "–∑–µ–ª–µ–Ω—å": "–í–µ—Å–µ–Ω–Ω—è—è –∑–µ–ª–µ–Ω—å –±–æ–≥–∞—Ç–∞ –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ –ø–æ—Å–ª–µ –∑–∏–º—ã",
                    "—Ä–µ–¥–∏—Å": "–†–∞–Ω–Ω–∏–π —Ä–µ–¥–∏—Å –ø–æ–º–æ–≥–∞–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º",
                    "–ª—É–∫": "–ó–µ–ª–µ–Ω—ã–π –ª—É–∫ —É–∫—Ä–µ–ø–ª—è–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –≤–µ—Å–Ω–æ–π"
                },
                "summer": {
                    "–ø–æ–º–∏–¥–æ—Ä—ã": "–õ–µ—Ç–Ω–∏–µ –ø–æ–º–∏–¥–æ—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –º–∞–∫—Å–∏–º—É–º –ª–∏–∫–æ–ø–∏–Ω–∞",
                    "–æ–≥—É—Ä—Ü—ã": "–°–≤–µ–∂–∏–µ –æ–≥—É—Ä—Ü—ã –ø–æ–º–æ–≥–∞—é—Ç –≤ –∂–∞—Ä—É",
                    "—è–≥–æ–¥—ã": "–õ–µ—Ç–Ω–∏–µ —è–≥–æ–¥—ã - –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–æ–≤"
                },
                "autumn": {
                    "—Ç—ã–∫–≤–∞": "–û—Å–µ–Ω–Ω—è—è —Ç—ã–∫–≤–∞ –±–æ–≥–∞—Ç–∞ –±–µ—Ç–∞-–∫–∞—Ä–æ—Ç–∏–Ω–æ–º",
                    "—è–±–ª–æ–∫–∏": "–û—Å–µ–Ω–Ω–∏–µ —è–±–ª–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–Ω–æ–≥–æ –ø–µ–∫—Ç–∏–Ω–∞",
                    "–æ—Ä–µ—Ö–∏": "–û—Ä–µ—Ö–∏ –¥–∞—é—Ç —ç–Ω–µ—Ä–≥–∏—é –ø–µ—Ä–µ–¥ –∑–∏–º–æ–π"
                },
                "winter": {
                    "—Ü–∏—Ç—Ä—É—Å—ã": "–ó–∏–º–Ω–∏–µ —Ü–∏—Ç—Ä—É—Å—ã - –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏—Ç–∞–º–∏–Ω–∞ C",
                    "–∫–∞–ø—É—Å—Ç–∞": "–ö–≤–∞—à–µ–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç",
                    "–∫–æ—Ä–Ω–µ–ø–ª–æ–¥—ã": "–ó–∏–º–Ω–∏–µ –∫–æ—Ä–Ω–µ–ø–ª–æ–¥—ã —Å–æ–≥—Ä–µ–≤–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–º"
                }
            },
            "en": {
                "spring": {
                    "greens": "Spring greens are rich in vitamins after winter",
                    "radish": "Early radish helps cleanse the body",
                    "onion": "Green onions boost immunity in spring"
                },
                "summer": {
                    "tomatoes": "Summer tomatoes contain maximum lycopene",
                    "cucumbers": "Fresh cucumbers help in hot weather",
                    "berries": "Summer berries are a source of antioxidants"
                },
                "autumn": {
                    "pumpkin": "Autumn pumpkin is rich in beta-carotene",
                    "apples": "Autumn apples contain lots of pectin",
                    "nuts": "Nuts provide energy before winter"
                },
                "winter": {
                    "citrus": "Winter citrus fruits are a source of vitamin C",
                    "cabbage": "Fermented cabbage supports immunity",
                    "root_vegetables": "Winter root vegetables warm the body"
                }
            }
        }
        
        season_data = seasonal_benefits.get(language, {}).get(season, {})
        
        for key, benefit in season_data.items():
            if key in food_name.lower():
                return benefit
        
        return None
    
    def _find_product_benefits(self, food_name: str, language: str) -> Dict[str, str]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        benefits = {}
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        if food_name in self.benefits_database:
            product_data = self.benefits_database[food_name]
            benefits["main_benefits"] = product_data.get(language, product_data.get("en", ""))
            benefits["key_nutrients"] = product_data.get("nutrients", "")
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for product, data in self.benefits_database.items():
            if product in food_name or any(word in food_name for word in product.split()):
                benefits["main_benefits"] = data.get(language, data.get("en", ""))
                benefits["key_nutrients"] = data.get("nutrients", "")
                break
        
        return benefits
    
    def _get_personalized_benefits(self, 
                                 food_name: str, 
                                 user_goals: List[str], 
                                 language: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤"""
        
        advice_parts = []
        
        for goal in user_goals:
            if goal == "lose_weight":
                if any(food in food_name for food in ["—Å–∞–ª–∞—Ç", "–æ–≤–æ—â–∏", "–∑–µ–ª–µ–Ω—å", "—Ä—ã–±–∞"]):
                    if language == "ru":
                        advice_parts.append("–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è - –Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ")
                    else:
                        advice_parts.append("Perfect for weight loss - low calorie and nutritious")
            
            elif goal == "gain_muscle":
                if any(food in food_name for food in ["–º—è—Å–æ", "–∫—É—Ä–∏—Ü–∞", "—Ä—ã–±–∞", "—Ç–≤–æ—Ä–æ–≥", "—è–π—Ü–∞"]):
                    if language == "ru":
                        advice_parts.append("–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Ä–æ—Å—Ç—É –º—ã—à—Ü")
                    else:
                        advice_parts.append("High protein content will help muscle growth")
            
            elif goal == "improve_energy":
                if any(food in food_name for food in ["–∫–∞—à–∞", "—Ä–∏—Å", "–æ–≤—Å—è–Ω–∫–∞", "—Ñ—Ä—É–∫—Ç—ã"]):
                    if language == "ru":
                        advice_parts.append("–î–∞—Å—Ç —É—Å—Ç–æ–π—á–∏–≤—É—é —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è")
                    else:
                        advice_parts.append("Will provide sustained energy for a long time")
        
        return " ".join(advice_parts)
    
    def _get_general_benefits(self, food_name: str, language: str) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –ø–æ–ª—å–∑—ã"""
        
        benefits = {}
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        if any(word in food_name for word in ["–º—è—Å–æ", "–∫—É—Ä–∏—Ü–∞", "—Ä—ã–±–∞", "–≥–æ–≤—è–¥–∏–Ω–∞"]):
            if language == "ru":
                benefits["main_benefits"] = "–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–µ–ª–∫–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è –º—ã—à—Ü –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∫–∞–Ω–µ–π"
                benefits["key_nutrients"] = "–ë–µ–ª–æ–∫, –∂–µ–ª–µ–∑–æ, –≤–∏—Ç–∞–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã B"
            else:
                benefits["main_benefits"] = "Source of high-quality protein essential for muscles and tissue repair"
                benefits["key_nutrients"] = "Protein, iron, B vitamins"
        
        elif any(word in food_name for word in ["–æ–≤–æ—â–∏", "—Å–∞–ª–∞—Ç", "–∫–∞–ø—É—Å—Ç–∞", "–º–æ—Ä–∫–æ–≤—å"]):
            if language == "ru":
                benefits["main_benefits"] = "–ë–æ–≥–∞—Ç –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏, –º–∏–Ω–µ—Ä–∞–ª–∞–º–∏ –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç"
                benefits["key_nutrients"] = "–í–∏—Ç–∞–º–∏–Ω—ã A, C, K, –∫–ª–µ—Ç—á–∞—Ç–∫–∞, –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã"
            else:
                benefits["main_benefits"] = "Rich in vitamins, minerals and fiber, supports digestion and immunity"
                benefits["key_nutrients"] = "Vitamins A, C, K, fiber, antioxidants"
        
        elif any(word in food_name for word in ["–∫–∞—à–∞", "—Ä–∏—Å", "–≥—Ä–µ—á–∫–∞", "–æ–≤—Å—è–Ω–∫–∞"]):
            if language == "ru":
                benefits["main_benefits"] = "–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–ª–æ–∂–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤, –¥–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—ã–µ –º–∏–Ω–µ—Ä–∞–ª—ã"
                benefits["key_nutrients"] = "–£–≥–ª–µ–≤–æ–¥—ã, –∫–ª–µ—Ç—á–∞—Ç–∫–∞, –≤–∏—Ç–∞–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã B, –º–∞–≥–Ω–∏–π"
            else:
                benefits["main_benefits"] = "Source of complex carbohydrates, provides lasting energy and contains important minerals"
                benefits["key_nutrients"] = "Carbohydrates, fiber, B vitamins, magnesium"
        
        return benefits
    
    def _get_amount_context(self, nutrient_name: str, amount: float, language: str) -> str:
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞"""
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        daily_norms = {
            "protein": 50,      # –≥—Ä–∞–º–º
            "fiber": 25,        # –≥—Ä–∞–º–º
            "calcium": 1000,    # –º–≥
            "iron": 18,         # –º–≥
            "vitamin_c": 90     # –º–≥
        }
        
        norm = daily_norms.get(nutrient_name.lower(), 0)
        
        if norm > 0:
            percentage = (amount / norm) * 100
            
            if language == "ru":
                return f"({percentage:.0f}% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã)"
            else:
                return f"({percentage:.0f}% of daily value)"
        
        return ""
    
    def _get_default_nutrient_explanation(self, nutrient_name: str, language: str) -> str:
        """–ë–∞–∑–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞"""
        
        if language == "ru":
            return f"{nutrient_name} –≤–∞–∂–µ–Ω –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞"
        else:
            return f"{nutrient_name} is important for normal body function"
    
    def _load_benefits_database(self) -> Dict[str, Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        return {
            "–∫—É—Ä–∏—Ü–∞": {
                "ru": "–û—Ç–ª–∏—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ª–µ–≥–∫–æ—É—Å–≤–æ—è–µ–º–æ–≥–æ –±–µ–ª–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç",
                "en": "Excellent source of easily digestible protein, supports muscle mass and immunity",
                "nutrients": "–ë–µ–ª–æ–∫ (23–≥), –í–∏—Ç–∞–º–∏–Ω B6, –ù–∏–∞—Ü–∏–Ω, –°–µ–ª–µ–Ω"
            },
            "—Ä—ã–±–∞": {
                "ru": "–ë–æ–≥–∞—Ç–∞ –æ–º–µ–≥–∞-3 –∂–∏—Ä–Ω—ã–º–∏ –∫–∏—Å–ª–æ—Ç–∞–º–∏, –ø–æ–ª–µ–∑–Ω—ã–º–∏ –¥–ª—è —Å–µ—Ä–¥—Ü–∞ –∏ –º–æ–∑–≥–∞",
                "en": "Rich in omega-3 fatty acids, beneficial for heart and brain health",
                "nutrients": "–ë–µ–ª–æ–∫, –û–º–µ–≥–∞-3, –í–∏—Ç–∞–º–∏–Ω D, –ô–æ–¥"
            },
            "–±—Ä–æ–∫–∫–æ–ª–∏": {
                "ru": "–°—É–ø–µ—Ä—Ñ—É–¥ —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –≤–∏—Ç–∞–º–∏–Ω–∞ C –∏ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–æ–≤",
                "en": "Superfood with high vitamin C content and antioxidants",
                "nutrients": "–í–∏—Ç–∞–º–∏–Ω C, –í–∏—Ç–∞–º–∏–Ω K, –§–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞, –ö–ª–µ—Ç—á–∞—Ç–∫–∞"
            },
            "–æ–≤—Å—è–Ω–∫–∞": {
                "ru": "–ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞—Å—Ç–≤–æ—Ä–∏–º–æ–π –∫–ª–µ—Ç—á–∞—Ç–∫–∏, –ø–æ–º–æ–≥–∞–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω",
                "en": "Source of soluble fiber, helps lower cholesterol",
                "nutrients": "–ö–ª–µ—Ç—á–∞—Ç–∫–∞, –ë–µ–ª–æ–∫, –ú–∞–≥–Ω–∏–π, –ú–∞—Ä–≥–∞–Ω–µ—Ü"
            },
            "—è–π—Ü–∞": {
                "ru": "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –±–µ–ª–æ–∫ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º–∏ –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç–∞–º–∏",
                "en": "Complete protein with all essential amino acids",
                "nutrients": "–ë–µ–ª–æ–∫, –•–æ–ª–∏–Ω, –í–∏—Ç–∞–º–∏–Ω D, –°–µ–ª–µ–Ω"
            },
            "—Ç–≤–æ—Ä–æ–≥": {
                "ru": "–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞–∑–µ–∏–Ω–æ–≤–æ–≥–æ –±–µ–ª–∫–∞ –∏ –∫–∞–ª—å—Ü–∏—è –¥–ª—è –∫–æ—Å—Ç–µ–π",
                "en": "High in casein protein and calcium for bone health",
                "nutrients": "–ë–µ–ª–æ–∫, –ö–∞–ª—å—Ü–∏–π, –§–æ—Å—Ñ–æ—Ä, –í–∏—Ç–∞–º–∏–Ω B12"
            }
        }
    
    def _load_nutrient_functions(self) -> Dict[str, Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤"""
        return {
            "protein": {
                "ru": "–ë–µ–ª–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º—ã—à—Ü, —Å–∏–Ω—Ç–µ–∑–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤ –∏ –≥–æ—Ä–º–æ–Ω–æ–≤",
                "en": "Protein is essential for muscle growth and repair, enzyme and hormone synthesis"
            },
            "fiber": {
                "ru": "–ö–ª–µ—Ç—á–∞—Ç–∫–∞ —É–ª—É—á—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—É—é –º–∏–∫—Ä–æ—Ñ–ª–æ—Ä—É –∫–∏—à–µ—á–Ω–∏–∫–∞",
                "en": "Fiber improves digestion, supports healthy gut microflora"
            },
            "calcium": {
                "ru": "–ö–∞–ª—å—Ü–∏–π —É–∫—Ä–µ–ø–ª—è–µ—Ç –∫–æ—Å—Ç–∏ –∏ –∑—É–±—ã, —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –º—ã—à–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è—Ö",
                "en": "Calcium strengthens bones and teeth, participates in muscle contractions"
            },
            "iron": {
                "ru": "–ñ–µ–ª–µ–∑–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∫–∏—Å–ª–æ—Ä–æ–¥–∞ –≤ –∫—Ä–æ–≤–∏",
                "en": "Iron is necessary for oxygen transport in blood"
            },
            "vitamin_c": {
                "ru": "–í–∏—Ç–∞–º–∏–Ω C —É–∫—Ä–µ–ø–ª—è–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç, —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–∏–Ω—Ç–µ–∑–µ –∫–æ–ª–ª–∞–≥–µ–Ω–∞",
                "en": "Vitamin C boosts immunity, participates in collagen synthesis"
            }
        }
    
    def _load_health_conditions_map(self) -> Dict[str, List[str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–¥–æ—Ä–æ–≤—å—è"""
        return {
            "diabetes": ["–Ω–∏–∑–∫–∏–π –≥–ª–∏–∫–µ–º–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å", "–∫–æ–Ω—Ç—Ä–æ–ª—å —Å–∞—Ö–∞—Ä–∞"],
            "hypertension": ["–Ω–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞—Ç—Ä–∏—è", "–∫–∞–ª–∏–π"],
            "anemia": ["–∂–µ–ª–µ–∑–æ", "–≤–∏—Ç–∞–º–∏–Ω B12", "—Ñ–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞"],
            "osteoporosis": ["–∫–∞–ª—å—Ü–∏–π", "–≤–∏—Ç–∞–º–∏–Ω D", "–º–∞–≥–Ω–∏–π"]
        }
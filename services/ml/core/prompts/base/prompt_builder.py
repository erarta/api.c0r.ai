"""
Enhanced Prompt Builder for c0r.AI ML Service
Main prompt construction system with regional adaptation and motivation
"""

from typing import Dict, Any, Optional, List
from datetime import datetime
from loguru import logger

from ...models.config.sota_config import TaskType, ModelTier
# Location models removed - using language-based region detection instead
from ..motivation.praise_system import MotivationSystem
from ..utils.plate_weight_estimator import PlateWeightEstimator


# Simple stubs for removed location models
class RegionalContext:
    """Simple stub for RegionalContext"""
    def __init__(self, region_code: str = "INTL"):
        self.region_code = region_code
        self.common_products = []
        self.cooking_methods = []
        self.measurement_units = "metric"


class LocationInfo:
    """Simple stub for LocationInfo"""
    def __init__(self, country_code: str = "INTL"):
        self.country_code = country_code


class PromptBuilder:
    """–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.motivation_system = MotivationSystem()
        self.weight_estimator = PlateWeightEstimator()
        
        # –ö—ç—à –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.prompt_cache: Dict[str, str] = {}
        
        logger.info("üéØ PromptBuilder initialized")
    
    def build_food_analysis_prompt(self, 
                                 user_language: str,
                                 regional_context: RegionalContext,
                                 user_profile: Dict[str, Any],
                                 motivation_level: str = "standard") -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã
        
        Args:
            user_language: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            regional_context: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫—É—Ö–Ω–∏
            user_profile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            motivation_level: –£—Ä–æ–≤–µ–Ω—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏
            
        Returns:
            –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã
        """
        logger.debug(f"üçΩÔ∏è Building food analysis prompt for {regional_context.region_code} in {user_language}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        motivation_greeting = self.motivation_system.get_motivation_greeting(
            user_language, motivation_level, user_profile.get('analysis_count', 0)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        regional_products = ", ".join(regional_context.common_products[:10])  # –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        seasonal_products = self._get_current_seasonal_products(regional_context)
        cooking_methods = ", ".join(regional_context.cooking_methods[:5])  # –¢–æ–ø-5 –º–µ—Ç–æ–¥–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–µ—Å–∞
        portion_context = self.weight_estimator.get_portion_context(regional_context.region_code)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–æ—â—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        encouragement = self.motivation_system.get_encouragement_message(
            user_language, "healthy_choice"
        )
        
        if user_language == "ru":
            return self._build_russian_food_analysis_prompt(
                motivation_greeting=motivation_greeting,
                regional_products=regional_products,
                seasonal_products=seasonal_products,
                cooking_methods=cooking_methods,
                portion_context=portion_context,
                measurement_units=regional_context.measurement_units,
                encouragement=encouragement,
                regional_context=regional_context
            )
        else:
            return self._build_english_food_analysis_prompt(
                motivation_greeting=motivation_greeting,
                regional_products=regional_products,
                seasonal_products=seasonal_products,
                cooking_methods=cooking_methods,
                portion_context=portion_context,
                measurement_units=regional_context.measurement_units,
                encouragement=encouragement,
                regional_context=regional_context
            )
    
    def build_recipe_generation_prompt(self,
                                     user_language: str,
                                     regional_context: RegionalContext,
                                     user_profile: Dict[str, Any],
                                     recipe_count: int = 3) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
        
        Args:
            user_language: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            regional_context: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_profile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            recipe_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        """
        logger.debug(f"üë®‚Äçüç≥ Building recipe generation prompt for {recipe_count} recipes")
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        motivation_greeting = self.motivation_system.get_cooking_motivation(
            user_language, user_profile.get('cooking_level', 'beginner')
        )
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_context_str = self._build_user_context_string(user_profile, user_language)
        
        # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        regional_cuisine = ", ".join(regional_context.cuisine_types)
        available_products = ", ".join(regional_context.common_products[:15])
        
        if user_language == "ru":
            return self._build_russian_recipe_prompt(
                motivation_greeting=motivation_greeting,
                regional_cuisine=regional_cuisine,
                available_products=available_products,
                user_context=user_context_str,
                regional_context=regional_context,
                recipe_count=recipe_count
            )
        else:
            return self._build_english_recipe_prompt(
                motivation_greeting=motivation_greeting,
                regional_cuisine=regional_cuisine,
                available_products=available_products,
                user_context=user_context_str,
                regional_context=regional_context,
                recipe_count=recipe_count
            )
    
    def _build_russian_food_analysis_prompt(self, **kwargs) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã"""
        return f"""
{kwargs['motivation_greeting']}

–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ {kwargs['regional_context'].cuisine_types[0]} –∫—É—Ö–Ω–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.

–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ ({kwargs['regional_context'].region_code}):
- –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ä–µ–≥–∏–æ–Ω–∞: {kwargs['regional_products']}
- –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {kwargs['seasonal_products']}
- –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≥–æ—Ç–æ–≤–∫–∏: {kwargs['cooking_methods']}
- –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: {kwargs['measurement_units']}
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫—É—Ö–Ω–∏: {kwargs['regional_context'].food_culture_notes}

–ó–ê–î–ê–ß–ê –ê–ù–ê–õ–ò–ó–ê:
1. üîç –û–ø—Ä–µ–¥–µ–ª–∏ –í–°–ï –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, —É–¥–µ–ª—è—è –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º
2. ‚öñÔ∏è –û—Ü–µ–Ω–∏ —Ç–æ—á–Ω—ã–π –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö {kwargs['portion_context']}
3. üßÆ –†–∞—Å—Å—á–∏—Ç–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
4. üíö –û–±—ä—è—Å–Ω–∏ –ø–æ–ª—å–∑—É –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫—É—Ö–Ω–∏
5. üéØ –î–æ–±–∞–≤—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è

–í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
- –£—á–∏—Ç—ã–≤–∞–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –û—Ü–µ–Ω–∏–≤–∞–π –≤–µ—Å —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ—Ä—Ü–∏–π –≤ {kwargs['regional_context'].region_code}
- –û–±—ä—è—Å–Ω—è–π –ø–æ–ª—å–∑—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –º–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π –ø–∏—Ç–∞–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{{
    "motivation_message": "{{–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞ –≤–µ–¥–µ–Ω–∏–µ —É—á–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è}}",
    "regional_analysis": {{
        "detected_cuisine_type": "{{–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –∫—É—Ö–Ω–∏}}",
        "regional_match_confidence": {{—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫—É—Ö–Ω–µ 0-1}},
        "cultural_notes": "{{–∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±–ª—é–¥–∞}}"
    }},
    "food_items": [
        {{
            "name": "{{—Ç–æ—á–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞}}",
            "regional_name": "{{–º–µ—Å—Ç–Ω–æ–µ/—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è}}",
            "weight_grams": {{—Ç–æ—á–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö}},
            "weight_confidence": {{—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ –≤–µ—Å–∞ 0-1}},
            "calories": {{–∫–∞–ª–æ—Ä–∏–∏}},
            "proteins": {{–±–µ–ª–∫–∏ –≤ –≥—Ä–∞–º–º–∞—Ö}},
            "fats": {{–∂–∏—Ä—ã –≤ –≥—Ä–∞–º–º–∞—Ö}},
            "carbohydrates": {{—É–≥–ª–µ–≤–æ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö}},
            "fiber": {{–∫–ª–µ—Ç—á–∞—Ç–∫–∞ –≤ –≥—Ä–∞–º–º–∞—Ö}},
            "health_benefits": "{{–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑—ã —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞}}",
            "regional_significance": "{{–∑–Ω–∞—á–µ–Ω–∏–µ –≤ {kwargs['regional_context'].region_code} –∫—É—Ö–Ω–µ}}",
            "seasonal_availability": "{{—Å–µ–∑–æ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ —Ä–µ–≥–∏–æ–Ω–µ}}",
            "cooking_method_detected": "{{–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è}}"
        }}
    ],
    "total_nutrition": {{
        "calories": {{–æ–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏}},
        "proteins": {{–æ–±—â–∏–µ –±–µ–ª–∫–∏}},
        "fats": {{–æ–±—â–∏–µ –∂–∏—Ä—ã}},
        "carbohydrates": {{–æ–±—â–∏–µ —É–≥–ª–µ–≤–æ–¥—ã}},
        "fiber": {{–æ–±—â–∞—è –∫–ª–µ—Ç—á–∞—Ç–∫–∞}},
        "estimated_plate_weight": {{–æ—Ü–µ–Ω–∫–∞ –≤–µ—Å–∞ –≤—Å–µ–π —Ç–∞—Ä–µ–ª–∫–∏ –≤ –≥—Ä–∞–º–º–∞—Ö}}
    }},
    "nutritional_analysis": {{
        "overall_healthiness": "{{–æ—Ü–µ–Ω–∫–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –±–ª—é–¥–∞ –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ}}",
        "dietary_recommendations": "{{–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é}}",
        "regional_nutrition_notes": "{{–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ {kwargs['regional_context'].region_code} –∫—É—Ö–Ω–∏}}",
        "balance_assessment": "{{–æ—Ü–µ–Ω–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ë–ñ–£}}"
    }},
    "encouragement": "{kwargs['encouragement']}"
}}

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:
- –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–µ–Ω –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–µ—Å–∞ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
- –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –≤ {kwargs['regional_context'].region_code} –∫—É—Ö–Ω–µ –µ—Å—Ç—å —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ü–∏–π
- –û–±—ä—è—Å–Ω—è–π –ø–æ–ª—å–∑—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º
- –ú–æ—Ç–∏–≤–∏—Ä—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ
- –í—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏, –Ω–µ —Å—Ç—Ä–æ–∫–∞–º–∏
"""
    
    def _build_english_food_analysis_prompt(self, **kwargs) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã"""
        return f"""
{kwargs['motivation_greeting']}

You are a nutrition expert specializing in {kwargs['regional_context'].cuisine_types[0]} cuisine. Analyze this food image with maximum accuracy.

REGIONAL CONTEXT ({kwargs['regional_context'].region_code}):
- Typical regional products: {kwargs['regional_products']}
- Seasonal products: {kwargs['seasonal_products']}
- Traditional cooking methods: {kwargs['cooking_methods']}
- Measurement units: {kwargs['measurement_units']}
- Cuisine characteristics: {kwargs['regional_context'].food_culture_notes}

ANALYSIS TASK:
1. üîç Identify ALL food items in the image, paying special attention to regional products
2. ‚öñÔ∏è Estimate precise weight of each item in grams {kwargs['portion_context']}
3. üßÆ Calculate detailed nutritional value for each product separately
4. üíö Explain health benefits of each product in regional cuisine context
5. üéØ Add motivational message about the importance of nutrition tracking

IMPORTANT REQUIREMENTS:
- Use accurate food names specific to the region
- Consider regional cooking characteristics
- Estimate weights based on standard portions in {kwargs['regional_context'].region_code}
- Explain product benefits in the context of local food traditions

RESPONSE FORMAT (strict JSON):
{{
    "motivation_message": "{{personal congratulations for tracking nutrition}}",
    "regional_analysis": {{
        "detected_cuisine_type": "{{identified cuisine type}}",
        "regional_match_confidence": {{confidence in regional cuisine match 0-1}},
        "cultural_notes": "{{cultural characteristics of the dish}}"
    }},
    "food_items": [
        {{
            "name": "{{precise food name}}",
            "regional_name": "{{local/traditional name if different}}",
            "weight_grams": {{precise weight in grams}},
            "weight_confidence": {{confidence in weight estimation 0-1}},
            "calories": {{calories}},
            "proteins": {{proteins in grams}},
            "fats": {{fats in grams}},
            "carbohydrates": {{carbohydrates in grams}},
            "fiber": {{fiber in grams}},
            "health_benefits": "{{detailed explanation of this product's benefits}}",
            "regional_significance": "{{significance in {kwargs['regional_context'].region_code} cuisine}}",
            "seasonal_availability": "{{seasonal availability in the region}}",
            "cooking_method_detected": "{{identified cooking method}}"
        }}
    ],
    "total_nutrition": {{
        "calories": {{total calories}},
        "proteins": {{total proteins}},
        "fats": {{total fats}},
        "carbohydrates": {{total carbohydrates}},
        "fiber": {{total fiber}},
        "estimated_plate_weight": {{estimated total plate weight in grams}}
    }},
    "nutritional_analysis": {{
        "overall_healthiness": "{{healthiness rating on 10-point scale}}",
        "dietary_recommendations": "{{personalized nutrition recommendations}}",
        "regional_nutrition_notes": "{{nutritional characteristics in {kwargs['regional_context'].region_code} cuisine context}}",
        "balance_assessment": "{{assessment of macronutrient balance}}"
    }},
    "encouragement": "{kwargs['encouragement']}"
}}

ADDITIONAL INSTRUCTIONS:
- Be maximally accurate in weight estimation - this is critical for calorie counting
- Consider that {kwargs['regional_context'].region_code} cuisine has its own portion characteristics
- Explain product benefits in simple and understandable language
- Motivate the user to continue tracking nutrition
- All numeric values must be numbers, not strings
"""
    
    def _build_russian_recipe_prompt(self, **kwargs) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        return f"""
{kwargs['motivation_greeting']}

–¢—ã - —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ {kwargs['regional_cuisine']} –∫—É—Ö–Ω–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–π –¢–†–ò —Ä–∞–∑–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{kwargs['user_context']}

–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ ({kwargs['regional_context'].region_code}):
- –¢–∏–ø—ã –∫—É—Ö–Ω–∏: {kwargs['regional_cuisine']}
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {kwargs['available_products']}
- –ú–µ—Ç–æ–¥—ã –≥–æ—Ç–æ–≤–∫–∏: {", ".join(kwargs['regional_context'].cooking_methods)}
- –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: {kwargs['regional_context'].measurement_units}
- –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {kwargs['regional_context'].food_culture_notes}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –†–ï–¶–ï–ü–¢–ê–ú:
1. üéØ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –†–ï–¶–ï–ü–¢ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. üèõÔ∏è –¢–†–ê–î–ò–¶–ò–û–ù–ù–´–ô –†–ï–¶–ï–ü–¢ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π {kwargs['regional_cuisine']} —Ä–µ—Ü–µ–ø—Ç
3. üåü –ö–†–ï–ê–¢–ò–í–ù–´–ô –†–ï–¶–ï–ü–¢ - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–ª–∏ —Ñ—å—é–∂–Ω

–ö–∞–∂–¥—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω:
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å —Ñ–æ—Ç–æ
- –ë—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–¥ {kwargs['regional_context'].region_code}
- –£—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–µ–≥–∏–æ–Ω–µ
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{{
    "motivation_message": "{{–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—É—é –µ–¥—É}}",
    "ingredient_analysis": {{
        "recognized_ingredients": [{{—Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤}}],
        "regional_availability": {{{{–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: "–ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏/—Å–µ–∑–æ–Ω–Ω—ã–π/—Ä–µ–¥–∫–∏–π"}}}},
        "suggested_additions": [{{–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤}}]
    }},
    "recipes": [
        {{
            "rank": 1,
            "type": "personal",
            "suitability_score": {{0-100}},
            "name": "{{–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞}}",
            "description": "{{–ø–æ—á–µ–º—É —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}}",
            "prep_time": "{{–≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏}}",
            "cook_time": "{{–≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏}}",
            "difficulty": "{{–ª–µ–≥–∫–æ/—Å—Ä–µ–¥–Ω–µ/—Å–ª–æ–∂–Ω–æ}}",
            "servings": {{–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π}},
            "ingredients": [
                {{
                    "item": "{{–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç}}",
                    "amount": "{{–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ {kwargs['regional_context'].measurement_units}}}",
                    "regional_availability": "{{–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ {kwargs['regional_context'].region_code}}}",
                    "substitutes": [{{—Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–º–µ–Ω}}]
                }}
            ],
            "instructions": [
                "{{–ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π}}"
            ],
            "nutrition_per_serving": {{
                "calories": {{–∫–∞–ª–æ—Ä–∏–∏}},
                "protein": {{–±–µ–ª–∫–∏}},
                "carbs": {{—É–≥–ª–µ–≤–æ–¥—ã}},
                "fat": {{–∂–∏—Ä—ã}}
            }},
            "health_benefits": "{{–ø–æ–ª—å–∑–∞ –±–ª—é–¥–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è}}",
            "regional_notes": "{{–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ {kwargs['regional_context'].region_code}}}",
            "personalization_notes": "{{–ø–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é}}",
            "cultural_significance": "{{–∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–ª—é–¥–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ}}"
        }},
        {{
            "rank": 2,
            "type": "traditional",
            "suitability_score": {{0-100}},
            "name": "{{–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞}}",
            "description": "{{–æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞}}",
            "cultural_background": "{{–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –æ –±–ª—é–¥–µ}}",
            "traditional_occasions": "{{–∫–æ–≥–¥–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ –≥–æ—Ç–æ–≤—è—Ç —ç—Ç–æ –±–ª—é–¥–æ}}"
            // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–µ—Ä–≤–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É
        }},
        {{
            "rank": 3,
            "type": "creative",
            "suitability_score": {{0-100}},
            "name": "{{–Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞}}",
            "description": "{{–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏}}",
            "innovation_notes": "{{—á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–º}}",
            "fusion_elements": "{{—ç–ª–µ–º–µ–Ω—Ç—ã —Ñ—å—é–∂–Ω –∫—É—Ö–Ω–∏ –µ—Å–ª–∏ –µ—Å—Ç—å}}"
            // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–µ—Ä–≤–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É
        }}
    ],
    "cooking_tips": [
        "{{—Å–æ–≤–µ—Ç—ã –ø–æ –≥–æ—Ç–æ–≤–∫–µ –¥–ª—è {kwargs['regional_context'].region_code}}}"
    ],
    "regional_wisdom": "{{—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã {kwargs['regional_cuisine']} –∫—É—Ö–Ω–∏}}",
    "encouragement": "{{–º–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –∏ –≥–æ—Ç–æ–≤–∫–µ}}"
}}

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:
- –†–∞–Ω–∂–∏—Ä—É–π —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- –£—á–∏—Ç—ã–≤–∞–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
- –í–∫–ª—é—á–∞–π –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∑–¥–æ—Ä–æ–≤—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
- –í—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏
"""
    
    def _build_english_recipe_prompt(self, **kwargs) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        return f"""
{kwargs['motivation_greeting']}

You are a chef and expert in {kwargs['regional_cuisine']} cuisine. Analyze the image and create THREE different recipes, ranked by user suitability.

USER CONTEXT:
{kwargs['user_context']}

REGIONAL CONTEXT ({kwargs['regional_context'].region_code}):
- Cuisine types: {kwargs['regional_cuisine']}
- Available products: {kwargs['available_products']}
- Cooking methods: {", ".join(kwargs['regional_context'].cooking_methods)}
- Measurement units: {kwargs['regional_context'].measurement_units}
- Cultural characteristics: {kwargs['regional_context'].food_culture_notes}

RECIPE REQUIREMENTS:
1. üéØ PERSONAL RECIPE - maximally suited to user profile
2. üèõÔ∏è TRADITIONAL RECIPE - classic {kwargs['regional_cuisine']} recipe
3. üåü CREATIVE RECIPE - modern interpretation or fusion

Each recipe should:
- Use ingredients from the photo
- Be adapted for {kwargs['regional_context'].region_code}
- Consider ingredient availability in the region
- Match the user profile

RESPONSE FORMAT (strict JSON):
{{
    "motivation_message": "{{congratulations for wanting to cook healthy food}}",
    "ingredient_analysis": {{
        "recognized_ingredients": [{{list of recognized ingredients}}],
        "regional_availability": {{{{ingredient: "easily found/seasonal/rare"}}}},
        "suggested_additions": [{{suggestions for additional regional ingredients}}]
    }},
    "recipes": [
        {{
            "rank": 1,
            "type": "personal",
            "suitability_score": {{0-100}},
            "name": "{{recipe name}}",
            "description": "{{why this recipe is perfect for the user}}",
            "prep_time": "{{preparation time}}",
            "cook_time": "{{cooking time}}",
            "difficulty": "{{easy/medium/hard}}",
            "servings": {{number of servings}},
            "ingredients": [
                {{
                    "item": "{{ingredient}}",
                    "amount": "{{amount in {kwargs['regional_context'].measurement_units}}}",
                    "regional_availability": "{{availability in {kwargs['regional_context'].region_code}}}",
                    "substitutes": [{{list of possible substitutions}}]
                }}
            ],
            "instructions": [
                "{{step-by-step instruction considering regional characteristics}}"
            ],
            "nutrition_per_serving": {{
                "calories": {{calories}},
                "protein": {{protein}},
                "carbs": {{carbohydrates}},
                "fat": {{fat}}
            }},
            "health_benefits": "{{health benefits of the dish}}",
            "regional_notes": "{{cooking characteristics in {kwargs['regional_context'].region_code}}}",
            "personalization_notes": "{{why it suits this particular user}}",
            "cultural_significance": "{{cultural significance of the dish in the region}}"
        }},
        {{
            "rank": 2,
            "type": "traditional",
            "suitability_score": {{0-100}},
            "name": "{{traditional recipe name}}",
            "description": "{{traditional dish description}}",
            "cultural_background": "{{historical background of the dish}}",
            "traditional_occasions": "{{when this dish is traditionally prepared}}"
            // ... other fields similar to first recipe
        }},
        {{
            "rank": 3,
            "type": "creative",
            "suitability_score": {{0-100}},
            "name": "{{creative recipe name}}",
            "description": "{{modern interpretation description}}",
            "innovation_notes": "{{what makes this recipe special}}",
            "fusion_elements": "{{fusion cuisine elements if any}}"
            // ... other fields similar to first recipe
        }}
    ],
    "cooking_tips": [
        "{{cooking tips for {kwargs['regional_context'].region_code}}}"
    ],
    "regional_wisdom": "{{traditional secrets of {kwargs['regional_cuisine']} cuisine}}",
    "encouragement": "{{motivation for healthy eating and cooking}}"
}}

ADDITIONAL INSTRUCTIONS:
- Rank recipes by decreasing user suitability
- Consider seasonality and ingredient availability
- Include cultural context and traditions
- Suggest healthy alternatives where possible
- All numeric values must be numbers
"""
    
    def _get_current_seasonal_products(self, regional_context: RegionalContext) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        current_month = datetime.now().month
        
        if current_month in [3, 4, 5]:
            season = "spring"
        elif current_month in [6, 7, 8]:
            season = "summer"
        elif current_month in [9, 10, 11]:
            season = "autumn"
        else:
            season = "winter"
        
        seasonal_products = regional_context.seasonal_products.get(season, [])
        return ", ".join(seasonal_products[:5])  # –¢–æ–ø-5 —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    
    def _build_user_context_string(self, user_profile: Dict[str, Any], language: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context_parts = []
        
        if user_profile.get('dietary_preferences'):
            dietary_prefs = [pref for pref in user_profile['dietary_preferences'] if pref != 'none']
            if dietary_prefs:
                if language == "ru":
                    context_parts.append(f"–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {', '.join(dietary_prefs)}")
                else:
                    context_parts.append(f"Dietary preferences: {', '.join(dietary_prefs)}")
        
        if user_profile.get('allergies'):
            allergies = [allergy for allergy in user_profile['allergies'] if allergy != 'none']
            if allergies:
                if language == "ru":
                    context_parts.append(f"–ê–ª–ª–µ—Ä–≥–∏–∏ (–∏–∑–±–µ–≥–∞—Ç—å): {', '.join(allergies)}")
                else:
                    context_parts.append(f"Allergies (avoid): {', '.join(allergies)}")
        
        if user_profile.get('goal'):
            goal_map_ru = {
                'lose_weight': '–ø–æ—Ö—É–¥–µ–Ω–∏–µ',
                'maintain_weight': '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞',
                'gain_weight': '–Ω–∞–±–æ—Ä –≤–µ—Å–∞'
            }
            goal_map_en = {
                'lose_weight': 'weight loss',
                'maintain_weight': 'weight maintenance',
                'gain_weight': 'weight gain'
            }
            
            goal_map = goal_map_ru if language == "ru" else goal_map_en
            goal = goal_map.get(user_profile['goal'], user_profile['goal'])
            
            if language == "ru":
                context_parts.append(f"–¶–µ–ª—å: {goal}")
            else:
                context_parts.append(f"Goal: {goal}")
        
        if user_profile.get('daily_calories_target'):
            if language == "ru":
                context_parts.append(f"–¶–µ–ª–µ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {user_profile['daily_calories_target']} –∫–∫–∞–ª/–¥–µ–Ω—å")
            else:
                context_parts.append(f"Daily calorie target: {user_profile['daily_calories_target']} cal/day")
        
        if user_profile.get('cooking_level'):
            if language == "ru":
                level_map = {'beginner': '–Ω–æ–≤–∏—á–æ–∫', 'intermediate': '—Å—Ä–µ–¥–Ω–∏–π', 'advanced': '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}
                level = level_map.get(user_profile['cooking_level'], user_profile['cooking_level'])
                context_parts.append(f"–£—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏: {level}")
            else:
                context_parts.append(f"Cooking level: {user_profile['cooking_level']}")
        
        if language == "ru":
            return "\n".join(context_parts) if context_parts else "–ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"
        else:
            return "\n".join(context_parts) if context_parts else "No specific requirements"
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        self.prompt_cache.clear()
        logger.info("üóëÔ∏è Prompt cache cleared")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        return {
            "cache_size": len(self.prompt_cache),
            "cache_keys": list(self.prompt_cache.keys())
        }
"""
Plate Weight Estimation Utilities for c0r.AI ML Service
Provides regional context for portion size estimation
"""

from typing import Dict, List, Optional, Tuple
from loguru import logger


class PlateWeightEstimator:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–π —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.regional_portion_data = self._load_regional_portion_data()
        self.plate_size_standards = self._load_plate_size_standards()
        self.density_coefficients = self._load_density_coefficients()
        
        logger.info("‚öñÔ∏è PlateWeightEstimator initialized")
    
    def get_portion_context(self, region_code: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ—Ä—Ü–∏–π –≤ —Ä–µ–≥–∏–æ–Ω–µ
        
        Args:
            region_code: –ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ (RU, US, DE, FR, IT, JP)
            
        Returns:
            –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–µ—Å–∞
        """
        logger.debug(f"üìè Getting portion context for {region_code}")
        
        regional_data = self.regional_portion_data.get(region_code, {})
        
        if not regional_data:
            logger.warning(f"No portion data for region {region_code}, using default")
            regional_data = self.regional_portion_data.get("DEFAULT", {})
        
        context_parts = []
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–∞—Ä–µ–ª–æ–∫
        plate_info = regional_data.get("plate_sizes", {})
        if plate_info:
            context_parts.append(f"(—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞ {plate_info.get('dinner', '25-27')} —Å–º)")
        
        # –¢–∏–ø–∏—á–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏
        portions = regional_data.get("typical_portions", {})
        if portions:
            portion_examples = []
            for food_type, weight_range in portions.items():
                portion_examples.append(f"{food_type}: {weight_range}–≥")
            
            if portion_examples:
                context_parts.append(f"—Ç–∏–ø–∏—á–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏: {', '.join(portion_examples[:3])}")
        
        # –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ü–∏–π
        cultural_notes = regional_data.get("cultural_notes", "")
        if cultural_notes:
            context_parts.append(cultural_notes)
        
        return " - " + ", ".join(context_parts) if context_parts else ""
    
    def estimate_food_weight(self, 
                           food_name: str, 
                           visual_size: str,
                           region_code: str = "RU") -> Tuple[int, float]:
        """
        –û—Ü–µ–Ω–∫–∞ –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        
        Args:
            food_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            visual_size: –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (small, medium, large, extra_large)
            region_code: –ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞
            
        Returns:
            Tuple[estimated_weight, confidence_score]
        """
        logger.debug(f"‚öñÔ∏è Estimating weight for {food_name}, size={visual_size}, region={region_code}")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –≤–µ—Å–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
        base_weights = self._get_base_food_weights(food_name)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        regional_data = self.regional_portion_data.get(region_code, {})
        portion_multiplier = regional_data.get("portion_multiplier", 1.0)
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–∞
        size_multipliers = {
            "tiny": 0.3,
            "small": 0.6,
            "medium": 1.0,
            "large": 1.5,
            "extra_large": 2.2,
            "huge": 3.0
        }
        
        size_multiplier = size_multipliers.get(visual_size, 1.0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Å
        base_weight = base_weights.get("medium", 100)  # –ë–∞–∑–æ–≤—ã–π –≤–µ—Å –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        estimated_weight = int(base_weight * size_multiplier * portion_multiplier)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = self._calculate_weight_confidence(food_name, visual_size, region_code)
        
        logger.debug(f"üìä Estimated weight: {estimated_weight}g, confidence: {confidence:.2f}")
        
        return estimated_weight, confidence
    
    def get_plate_size_reference(self, region_code: str) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö —Ç–∞—Ä–µ–ª–æ–∫
        
        Args:
            region_code: –ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Ç–∞—Ä–µ–ª–æ–∫
        """
        plate_data = self.plate_size_standards.get(region_code, {})
        
        if not plate_data:
            plate_data = self.plate_size_standards.get("DEFAULT", {})
        
        return plate_data
    
    def get_density_coefficient(self, food_category: str) -> float:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        
        Args:
            food_category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
            
        Returns:
            –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
        """
        return self.density_coefficients.get(food_category, 1.0)
    
    def _get_base_food_weights(self, food_name: str) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≤–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        food_lower = food_name.lower()
        
        # –ë–∞–∑–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
        food_weights = {
            # –ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞
            "–∫—É—Ä–∏—Ü–∞": {"small": 80, "medium": 120, "large": 180},
            "–≥–æ–≤—è–¥–∏–Ω–∞": {"small": 90, "medium": 140, "large": 200},
            "—Å–≤–∏–Ω–∏–Ω–∞": {"small": 85, "medium": 130, "large": 190},
            "—Ä—ã–±–∞": {"small": 70, "medium": 110, "large": 160},
            "–∫–æ—Ç–ª–µ—Ç–∞": {"small": 60, "medium": 90, "large": 130},
            
            # –ì–∞—Ä–Ω–∏—Ä—ã
            "—Ä–∏—Å": {"small": 60, "medium": 100, "large": 150},
            "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": {"small": 80, "medium": 120, "large": 180},
            "–º–∞–∫–∞—Ä–æ–Ω—ã": {"small": 70, "medium": 110, "large": 160},
            "–≥—Ä–µ—á–∫–∞": {"small": 65, "medium": 100, "large": 140},
            "–ø—é—Ä–µ": {"small": 80, "medium": 120, "large": 180},
            
            # –û–≤–æ—â–∏
            "—Å–∞–ª–∞—Ç": {"small": 50, "medium": 80, "large": 120},
            "–ø–æ–º–∏–¥–æ—Ä": {"small": 60, "medium": 100, "large": 150},
            "–æ–≥—É—Ä–µ—Ü": {"small": 40, "medium": 70, "large": 100},
            "–∫–∞–ø—É—Å—Ç–∞": {"small": 50, "medium": 80, "large": 120},
            "–º–æ—Ä–∫–æ–≤—å": {"small": 30, "medium": 50, "large": 80},
            
            # –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            "—Ç–≤–æ—Ä–æ–≥": {"small": 60, "medium": 100, "large": 150},
            "—Å—ã—Ä": {"small": 20, "medium": 40, "large": 60},
            "–π–æ–≥—É—Ä—Ç": {"small": 80, "medium": 125, "large": 200},
            
            # –•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ
            "—Ö–ª–µ–±": {"small": 15, "medium": 25, "large": 40},
            "–±—É–ª–æ—á–∫–∞": {"small": 30, "medium": 50, "large": 80},
            
            # –°—É–ø—ã
            "—Å—É–ø": {"small": 150, "medium": 250, "large": 350},
            "–±–æ—Ä—â": {"small": 150, "medium": 250, "large": 350},
            
            # –ö–∞—à–∏
            "–∫–∞—à–∞": {"small": 80, "medium": 120, "large": 180},
            "–æ–≤—Å—è–Ω–∫–∞": {"small": 70, "medium": 110, "large": 160},
            
            # –§—Ä—É–∫—Ç—ã
            "—è–±–ª–æ–∫–æ": {"small": 80, "medium": 120, "large": 180},
            "–±–∞–Ω–∞–Ω": {"small": 60, "medium": 100, "large": 140},
            "–∞–ø–µ–ª—å—Å–∏–Ω": {"small": 80, "medium": 130, "large": 200},
        }
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for key, weights in food_weights.items():
            if key in food_lower or food_lower in key:
                return weights
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if any(word in food_lower for word in ["–º—è—Å–æ", "–∫—É—Ä–∏—Ü–∞", "–≥–æ–≤—è–¥–∏–Ω–∞", "—Å–≤–∏–Ω–∏–Ω–∞", "–±–∞—Ä–∞–Ω–∏–Ω–∞"]):
            return {"small": 85, "medium": 130, "large": 190}
        elif any(word in food_lower for word in ["—Ä—ã–±–∞", "–ª–æ—Å–æ—Å—å", "—Ç—Ä–µ—Å–∫–∞", "—Å—É–¥–∞–∫"]):
            return {"small": 70, "medium": 110, "large": 160}
        elif any(word in food_lower for word in ["–æ–≤–æ—â–∏", "—Å–∞–ª–∞—Ç", "–∫–∞–ø—É—Å—Ç–∞", "–º–æ—Ä–∫–æ–≤—å"]):
            return {"small": 45, "medium": 75, "large": 110}
        elif any(word in food_lower for word in ["–∫–∞—à–∞", "—Ä–∏—Å", "–≥—Ä–µ—á–∫–∞", "–æ–≤—Å—è–Ω–∫–∞"]):
            return {"small": 70, "medium": 110, "large": 160}
        elif any(word in food_lower for word in ["—Å—É–ø", "–±–æ—Ä—â", "—Å–æ–ª—è–Ω–∫–∞", "—â–∏"]):
            return {"small": 150, "medium": 250, "large": 350}
        
        # –ë–∞–∑–æ–≤—ã–π –≤–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {"small": 60, "medium": 100, "large": 150}
    
    def _calculate_weight_confidence(self, 
                                   food_name: str, 
                                   visual_size: str, 
                                   region_code: str) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ—Ü–µ–Ω–∫–µ –≤–µ—Å–∞"""
        
        confidence = 0.7  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∑–Ω–∞–∫–æ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        common_foods = ["–∫—É—Ä–∏—Ü–∞", "—Ä–∏—Å", "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–º—è—Å–æ", "—Ä—ã–±–∞", "—Å–∞–ª–∞—Ç", "—Å—É–ø"]
        if any(food in food_name.lower() for food in common_foods):
            confidence += 0.1
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞
        size_confidence = {
            "tiny": 0.6,
            "small": 0.75,
            "medium": 0.85,
            "large": 0.8,
            "extra_large": 0.7,
            "huge": 0.6
        }
        
        size_conf = size_confidence.get(visual_size, 0.7)
        confidence = (confidence + size_conf) / 2
        
        # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        if region_code in ["RU", "US", "DE"]:  # –•–æ—Ä–æ—à–æ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
            confidence += 0.05
        
        return min(confidence, 0.95)  # –ú–∞–∫—Å–∏–º—É–º 95% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    
    def _load_regional_portion_data(self) -> Dict[str, Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Ä—Ü–∏—è—Ö"""
        return {
            "RU": {
                "portion_multiplier": 1.1,  # –†—É—Å—Å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ —á—É—Ç—å –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
                "plate_sizes": {
                    "dinner": "24-26",
                    "soup": "20-22",
                    "dessert": "18-20"
                },
                "typical_portions": {
                    "–º—è—Å–æ": "120-150",
                    "–≥–∞—Ä–Ω–∏—Ä": "100-130",
                    "—Å–∞–ª–∞—Ç": "70-100",
                    "—Å—É–ø": "250-300"
                },
                "cultural_notes": "–≤ –†–æ—Å—Å–∏–∏ –ø—Ä–∏–Ω—è—Ç–æ –ø–æ–¥–∞–≤–∞—Ç—å —Å—ã—Ç–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏"
            },
            "US": {
                "portion_multiplier": 1.3,  # –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ –±–æ–ª—å—à–µ
                "plate_sizes": {
                    "dinner": "26-28",
                    "soup": "22-24",
                    "dessert": "20-22"
                },
                "typical_portions": {
                    "meat": "150-200",
                    "side": "120-160",
                    "salad": "80-120",
                    "soup": "300-400"
                },
                "cultural_notes": "–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ –±–æ–ª—å—à–∏–µ"
            },
            "DE": {
                "portion_multiplier": 1.0,  # –ù–µ–º–µ—Ü–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
                "plate_sizes": {
                    "dinner": "24-26",
                    "soup": "20-22",
                    "dessert": "18-20"
                },
                "typical_portions": {
                    "fleisch": "120-140",
                    "beilage": "100-120",
                    "salat": "60-90",
                    "suppe": "250-300"
                },
                "cultural_notes": "–Ω–µ–º–µ—Ü–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ —É–º–µ—Ä–µ–Ω–Ω—ã–µ –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"
            },
            "FR": {
                "portion_multiplier": 0.9,  # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ –º–µ–Ω—å—à–µ
                "plate_sizes": {
                    "dinner": "22-24",
                    "soup": "18-20",
                    "dessert": "16-18"
                },
                "typical_portions": {
                    "viande": "100-120",
                    "accompagnement": "80-100",
                    "salade": "50-80",
                    "soupe": "200-250"
                },
                "cultural_notes": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –∫—É—Ö–Ω—è —Ü–µ–Ω–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"
            },
            "IT": {
                "portion_multiplier": 0.95,  # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ —á—É—Ç—å –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
                "plate_sizes": {
                    "dinner": "23-25",
                    "soup": "19-21",
                    "dessert": "17-19"
                },
                "typical_portions": {
                    "carne": "110-130",
                    "contorno": "90-110",
                    "insalata": "60-90",
                    "zuppa": "220-280"
                },
                "cultural_notes": "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ —É–º–µ—Ä–µ–Ω–Ω—ã–µ, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–≤–µ–∂–µ—Å—Ç–∏"
            },
            "JP": {
                "portion_multiplier": 0.8,  # –Ø–ø–æ–Ω—Å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ –º–µ–Ω—å—à–µ
                "plate_sizes": {
                    "dinner": "20-22",
                    "soup": "16-18",
                    "dessert": "14-16"
                },
                "typical_portions": {
                    "ËÇâ": "80-100",
                    "„ÅîÈ£Ø": "80-120",
                    "ÈáéËèú": "50-70",
                    "„Çπ„Éº„Éó": "150-200"
                },
                "cultural_notes": "—è–ø–æ–Ω—Å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ –Ω–µ–±–æ–ª—å—à–∏–µ, –Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ"
            },
            "DEFAULT": {
                "portion_multiplier": 1.0,
                "plate_sizes": {
                    "dinner": "24-26",
                    "soup": "20-22",
                    "dessert": "18-20"
                },
                "typical_portions": {
                    "protein": "120-150",
                    "carbs": "100-130",
                    "vegetables": "70-100"
                },
                "cultural_notes": "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏"
            }
        }
    
    def _load_plate_size_standards(self) -> Dict[str, Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞—Ä–µ–ª–æ–∫"""
        return {
            "RU": {
                "dinner_plate": "24-26 —Å–º",
                "soup_bowl": "20-22 —Å–º",
                "dessert_plate": "18-20 —Å–º",
                "bread_plate": "15-17 —Å–º"
            },
            "US": {
                "dinner_plate": "26-28 —Å–º (10-11 –¥—é–π–º–æ–≤)",
                "soup_bowl": "22-24 —Å–º (8.5-9.5 –¥—é–π–º–æ–≤)",
                "dessert_plate": "20-22 —Å–º (8-8.5 –¥—é–π–º–æ–≤)",
                "bread_plate": "16-18 —Å–º (6-7 –¥—é–π–º–æ–≤)"
            },
            "DEFAULT": {
                "dinner_plate": "24-26 —Å–º",
                "soup_bowl": "20-22 —Å–º",
                "dessert_plate": "18-20 —Å–º",
                "bread_plate": "15-17 —Å–º"
            }
        }
    
    def _load_density_coefficients(self) -> Dict[str, float]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        return {
            "liquid": 1.0,      # –ñ–∏–¥–∫–æ—Å—Ç–∏ (—Å—É–ø—ã, –Ω–∞–ø–∏—Ç–∫–∏)
            "soft": 0.7,        # –ú—è–≥–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–ø—é—Ä–µ, –∫–∞—à–∏)
            "medium": 0.8,      # –°—Ä–µ–¥–Ω–µ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–º—è—Å–æ, —Ä—ã–±–∞)
            "dense": 1.2,       # –ü–ª–æ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—Ö–ª–µ–±, —Å—ã—Ä)
            "airy": 0.3,        # –í–æ–∑–¥—É—à–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—Å–∞–ª–∞—Ç—ã, –∑–µ–ª–µ–Ω—å)
            "granular": 0.6     # –°—ã–ø—É—á–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—Ä–∏—Å, –∫—Ä—É–ø—ã)
        }
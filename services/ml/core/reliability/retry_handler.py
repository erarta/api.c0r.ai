"""
Retry Handler for c0r.AI ML Service
Provides intelligent retry mechanisms with exponential backoff
"""

import time
import random
from typing import Callable, Any, Optional, List, Dict, Union
from dataclasses import dataclass
from enum import Enum
import functools
from loguru import logger


class RetryStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤"""
    FIXED_DELAY = "fixed_delay"           # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    EXPONENTIAL_BACKOFF = "exponential"   # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    LINEAR_BACKOFF = "linear"             # –õ–∏–Ω–µ–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    RANDOM_JITTER = "random_jitter"       # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    FIBONACCI = "fibonacci"               # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏


@dataclass
class RetryConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry –º–µ—Ö–∞–Ω–∏–∑–º–∞"""
    max_attempts: int = 3                 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    base_delay: float = 1.0              # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫—É–Ω–¥—ã)
    max_delay: float = 60.0              # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫—É–Ω–¥—ã)
    strategy: RetryStrategy = RetryStrategy.EXPONENTIAL_BACKOFF
    backoff_multiplier: float = 2.0      # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ backoff
    jitter: bool = True                  # –î–æ–±–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π jitter
    jitter_range: float = 0.1            # –î–∏–∞–ø–∞–∑–æ–Ω jitter (0.0 - 1.0)
    retryable_exceptions: tuple = (Exception,)  # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
    stop_on_exceptions: tuple = ()       # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    timeout_per_attempt: Optional[float] = None  # –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫—É


@dataclass
class RetryResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
    success: bool
    result: Any = None
    error: Optional[Exception] = None
    attempts_made: int = 0
    total_time: float = 0.0
    last_delay: float = 0.0
    retry_history: List[Dict[str, Any]] = None
    
    def __post_init__(self):
        if self.retry_history is None:
            self.retry_history = []


class RetryHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ backoff
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
    - Jitter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è thundering herd
    - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    
    def __init__(self, 
                 name: str,
                 config: Optional[RetryConfig] = None):
        self.name = name
        self.config = config or RetryConfig()
        self.stats = {
            "total_executions": 0,
            "successful_executions": 0,
            "failed_executions": 0,
            "total_attempts": 0,
            "avg_attempts_per_execution": 0.0,
            "avg_execution_time": 0.0,
            "exception_counts": {}
        }
        
        logger.info(f"üîÑ RetryHandler '{name}' initialized with config: {self.config}")
    
    def execute(self, func: Callable, *args, **kwargs) -> RetryResult:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        
        Args:
            func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        start_time = time.time()
        self.stats["total_executions"] += 1
        
        retry_history = []
        last_exception = None
        
        logger.debug(f"üöÄ Starting retry execution for '{self.name}' (max {self.config.max_attempts} attempts)")
        
        for attempt in range(1, self.config.max_attempts + 1):
            attempt_start = time.time()
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                if self.config.timeout_per_attempt:
                    result = self._execute_with_timeout(
                        func, self.config.timeout_per_attempt, *args, **kwargs
                    )
                else:
                    result = func(*args, **kwargs)
                
                # –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                attempt_time = time.time() - attempt_start
                total_time = time.time() - start_time
                
                retry_history.append({
                    "attempt": attempt,
                    "success": True,
                    "execution_time": attempt_time,
                    "error": None
                })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats["successful_executions"] += 1
                self.stats["total_attempts"] += attempt
                self._update_avg_stats(attempt, total_time)
                
                logger.debug(f"‚úÖ '{self.name}' succeeded on attempt {attempt} in {total_time:.2f}s")
                
                return RetryResult(
                    success=True,
                    result=result,
                    attempts_made=attempt,
                    total_time=total_time,
                    retry_history=retry_history
                )
                
            except Exception as e:
                attempt_time = time.time() - attempt_start
                last_exception = e
                
                retry_history.append({
                    "attempt": attempt,
                    "success": False,
                    "execution_time": attempt_time,
                    "error": str(e),
                    "exception_type": type(e).__name__
                })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                exception_name = type(e).__name__
                self.stats["exception_counts"][exception_name] = (
                    self.stats["exception_counts"].get(exception_name, 0) + 1
                )
                
                logger.warning(f"‚ö†Ô∏è '{self.name}' attempt {attempt} failed: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è
                if self._should_stop_retry(e):
                    logger.error(f"üõë Stopping retry for '{self.name}' due to non-retryable exception: {e}")
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                if not self._should_retry(e):
                    logger.error(f"üö´ Not retrying '{self.name}' due to exception type: {e}")
                    break
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –¥–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                if attempt < self.config.max_attempts:
                    delay = self._calculate_delay(attempt)
                    logger.debug(f"‚è≥ Waiting {delay:.2f}s before retry {attempt + 1}")
                    time.sleep(delay)
        
        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        total_time = time.time() - start_time
        self.stats["failed_executions"] += 1
        self.stats["total_attempts"] += self.config.max_attempts
        self._update_avg_stats(self.config.max_attempts, total_time)
        
        logger.error(f"‚ùå '{self.name}' failed after {self.config.max_attempts} attempts")
        
        return RetryResult(
            success=False,
            error=last_exception,
            attempts_made=self.config.max_attempts,
            total_time=total_time,
            retry_history=retry_history
        )
    
    def _should_retry(self, exception: Exception) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø—Ä–∏ –¥–∞–Ω–Ω–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–∏"""
        return isinstance(exception, self.config.retryable_exceptions)
    
    def _should_stop_retry(self, exception: Exception) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –¥–∞–Ω–Ω–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–∏"""
        return isinstance(exception, self.config.stop_on_exceptions)
    
    def _calculate_delay(self, attempt: int) -> float:
        """–†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π"""
        if self.config.strategy == RetryStrategy.FIXED_DELAY:
            delay = self.config.base_delay
            
        elif self.config.strategy == RetryStrategy.EXPONENTIAL_BACKOFF:
            delay = self.config.base_delay * (self.config.backoff_multiplier ** (attempt - 1))
            
        elif self.config.strategy == RetryStrategy.LINEAR_BACKOFF:
            delay = self.config.base_delay * attempt
            
        elif self.config.strategy == RetryStrategy.RANDOM_JITTER:
            delay = random.uniform(0, self.config.base_delay * attempt)
            
        elif self.config.strategy == RetryStrategy.FIBONACCI:
            delay = self.config.base_delay * self._fibonacci(attempt)
            
        else:
            delay = self.config.base_delay
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        delay = min(delay, self.config.max_delay)
        
        # –î–æ–±–∞–≤–ª—è–µ–º jitter –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.config.jitter:
            jitter_amount = delay * self.config.jitter_range
            jitter = random.uniform(-jitter_amount, jitter_amount)
            delay = max(0, delay + jitter)
        
        return delay
    
    def _fibonacci(self, n: int) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏"""
        if n <= 1:
            return n
        
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        
        return b
    
    def _execute_with_timeout(self, func: Callable, timeout: float, *args, **kwargs) -> Any:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        import signal
        
        def timeout_handler(signum, frame):
            raise TimeoutError(f"Function execution exceeded {timeout} seconds")
        
        if hasattr(signal, 'SIGALRM'):
            old_handler = signal.signal(signal.SIGALRM, timeout_handler)
            signal.alarm(int(timeout))
            
            try:
                result = func(*args, **kwargs)
                signal.alarm(0)
                return result
            finally:
                signal.signal(signal.SIGALRM, old_handler)
        else:
            # –î–ª—è Windows - –ø—Ä–æ—Å—Ç–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            return func(*args, **kwargs)
    
    def _update_avg_stats(self, attempts: int, execution_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫"""
        total_executions = self.stats["total_executions"]
        
        # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if total_executions == 1:
            self.stats["avg_attempts_per_execution"] = attempts
        else:
            self.stats["avg_attempts_per_execution"] = (
                (self.stats["avg_attempts_per_execution"] * (total_executions - 1) + attempts) /
                total_executions
            )
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if total_executions == 1:
            self.stats["avg_execution_time"] = execution_time
        else:
            self.stats["avg_execution_time"] = (
                (self.stats["avg_execution_time"] * (total_executions - 1) + execution_time) /
                total_executions
            )
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retry handler"""
        success_rate = 0.0
        if self.stats["total_executions"] > 0:
            success_rate = (self.stats["successful_executions"] / self.stats["total_executions"]) * 100
        
        return {
            "name": self.name,
            "config": {
                "max_attempts": self.config.max_attempts,
                "base_delay": self.config.base_delay,
                "max_delay": self.config.max_delay,
                "strategy": self.config.strategy.value,
                "backoff_multiplier": self.config.backoff_multiplier,
                "jitter": self.config.jitter
            },
            "stats": {
                "total_executions": self.stats["total_executions"],
                "successful_executions": self.stats["successful_executions"],
                "failed_executions": self.stats["failed_executions"],
                "success_rate": round(success_rate, 2),
                "total_attempts": self.stats["total_attempts"],
                "avg_attempts_per_execution": round(self.stats["avg_attempts_per_execution"], 2),
                "avg_execution_time": round(self.stats["avg_execution_time"], 2),
                "exception_counts": self.stats["exception_counts"]
            }
        }
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            "total_executions": 0,
            "successful_executions": 0,
            "failed_executions": 0,
            "total_attempts": 0,
            "avg_attempts_per_execution": 0.0,
            "avg_execution_time": 0.0,
            "exception_counts": {}
        }
        
        logger.info(f"üìä Stats reset for RetryHandler '{self.name}'")
    
    def __call__(self, func: Callable) -> Callable:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è retry –∫ —Ñ—É–Ω–∫—Ü–∏–∏"""
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            result = self.execute(func, *args, **kwargs)
            if result.success:
                return result.result
            else:
                raise result.error
        
        return wrapper


def retry(name: str, 
          config: Optional[RetryConfig] = None) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è retry –∫ —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        name: –ò–º—è retry handler
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    def decorator(func: Callable) -> Callable:
        handler = RetryHandler(name, config)
        return handler(func)
    
    return decorator


def retry_with_exponential_backoff(max_attempts: int = 3,
                                 base_delay: float = 1.0,
                                 max_delay: float = 60.0,
                                 backoff_multiplier: float = 2.0,
                                 jitter: bool = True) -> Callable:
    """
    –£–¥–æ–±–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ backoff
    
    Args:
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        base_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        max_delay: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        backoff_multiplier: –ú–Ω–æ–∂–∏—Ç–µ–ª—å backoff
        jitter: –î–æ–±–∞–≤–ª—è—Ç—å jitter
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    config = RetryConfig(
        max_attempts=max_attempts,
        base_delay=base_delay,
        max_delay=max_delay,
        strategy=RetryStrategy.EXPONENTIAL_BACKOFF,
        backoff_multiplier=backoff_multiplier,
        jitter=jitter
    )
    
    def decorator(func: Callable) -> Callable:
        handler = RetryHandler(func.__name__, config)
        return handler(func)
    
    return decorator


def retry_on_exceptions(*exceptions: type,
                       max_attempts: int = 3,
                       base_delay: float = 1.0) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è retry —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
    
    Args:
        *exceptions: –¢–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è retry
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        base_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    config = RetryConfig(
        max_attempts=max_attempts,
        base_delay=base_delay,
        retryable_exceptions=exceptions
    )
    
    def decorator(func: Callable) -> Callable:
        handler = RetryHandler(func.__name__, config)
        return handler(func)
    
    return decorator


class RetryHandlerRegistry:
    """–†–µ–µ—Å—Ç—Ä retry handler'–æ–≤"""
    
    def __init__(self):
        self._handlers: Dict[str, RetryHandler] = {}
        
        logger.info("üìã RetryHandlerRegistry initialized")
    
    def create(self, 
               name: str, 
               config: Optional[RetryConfig] = None) -> RetryHandler:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ retry handler"""
        if name in self._handlers:
            logger.warning(f"‚ö†Ô∏è RetryHandler '{name}' already exists, returning existing")
            return self._handlers[name]
        
        handler = RetryHandler(name, config)
        self._handlers[name] = handler
        
        logger.info(f"üÜï Created RetryHandler '{name}'")
        return handler
    
    def get(self, name: str) -> Optional[RetryHandler]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ retry handler –ø–æ –∏–º–µ–Ω–∏"""
        return self._handlers.get(name)
    
    def get_all_stats(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö retry handler'–æ–≤"""
        return {name: handler.get_stats() 
               for name, handler in self._handlers.items()}
    
    def remove(self, name: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ retry handler"""
        if name in self._handlers:
            del self._handlers[name]
            logger.info(f"üóëÔ∏è Removed RetryHandler '{name}'")
            return True
        return False
    
    def list_names(self) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –≤—Å–µ—Ö retry handler'–æ–≤"""
        return list(self._handlers.keys())


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä retry handler'–æ–≤
retry_registry = RetryHandlerRegistry()
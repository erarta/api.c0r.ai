"""
User Location Detector for c0r.AI
Main location detection system with multiple providers and fallback strategies
"""

import asyncio
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
from loguru import logger

from .models import (
    LocationInfo, RegionalContext, LocationResult,
    DetectionSource, DetectionConfidence
)
from .regional_data.cuisines import get_regional_cuisine, get_default_cuisine


class LocationDetector:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, cache_ttl_hours: int = 24):
        # –ö—ç—à –ª–æ–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.location_cache: Dict[str, Dict[str, Any]] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (24 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.cache_ttl = timedelta(hours=cache_ttl_hours)
        
        # Fallback —Ü–µ–ø–æ—á–∫–∞
        self.detection_chain = [
            self._detect_via_telegram,
            self._detect_via_ip,
            self._detect_via_timezone,
            self._detect_via_language_fallback
        ]
        
        logger.info("üåç LocationDetector initialized")
    
    async def detect_location(self, 
                            user_id: str, 
                            language: str = "en",
                            ip_address: Optional[str] = None,
                            timezone: Optional[str] = None,
                            telegram_data: Optional[Dict[str, Any]] = None) -> LocationResult:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            language: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ip_address: IP –∞–¥—Ä–µ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            timezone: –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            telegram_data: –î–∞–Ω–Ω—ã–µ –∏–∑ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            LocationResult —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ–∫–∞—Ü–∏–∏
        """
        logger.info(f"üîç Detecting location for user {user_id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_location = self._get_cached_location(user_id)
            if cached_location:
                logger.info(f"‚úÖ Using cached location for user {user_id}: {cached_location['location'].country_code}")
                return LocationResult(
                    location=cached_location['location'],
                    regional_context=cached_location['regional_context'],
                    success=True,
                    cache_hit=True
                )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
            detection_context = {
                "user_id": user_id,
                "language": language,
                "ip_address": ip_address,
                "timezone": timezone,
                "telegram_data": telegram_data or {}
            }
            
            # –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
            for detection_method in self.detection_chain:
                try:
                    location = await detection_method(detection_context)
                    if location:
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        regional_context = self.get_regional_context(location)
                        
                        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        await self._cache_location(user_id, location, regional_context)
                        
                        logger.info(f"‚úÖ Location detected for user {user_id}: {location.country_code} via {location.source}")
                        
                        return LocationResult(
                            location=location,
                            regional_context=regional_context,
                            success=True,
                            fallback_used=location.source != DetectionSource.TELEGRAM
                        )
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Detection method {detection_method.__name__} failed: {e}")
                    continue
            
            # –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.warning(f"‚ùå All detection methods failed for user {user_id}, using default")
            
            default_location = self._get_default_location(language)
            default_context = self.get_regional_context(default_location)
            
            return LocationResult(
                location=default_location,
                regional_context=default_context,
                success=True,
                fallback_used=True
            )
            
        except Exception as e:
            logger.error(f"‚ùå Location detection error for user {user_id}: {e}")
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º default
            default_location = self._get_default_location(language)
            default_context = self.get_regional_context(default_location)
            
            return LocationResult(
                location=default_location,
                regional_context=default_context,
                success=False,
                error_message=str(e),
                fallback_used=True
            )
    
    async def _detect_via_telegram(self, context: Dict[str, Any]) -> Optional[LocationInfo]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API"""
        telegram_data = context.get("telegram_data", {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏ –≤ Telegram
        if not telegram_data or "location" not in telegram_data:
            logger.debug("ü§ñ No Telegram location data provided")
            return None
        
        location_data = telegram_data["location"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        latitude = location_data.get("latitude")
        longitude = location_data.get("longitude")
        
        if not latitude or not longitude:
            logger.debug("ü§ñ Invalid Telegram location coordinates")
            return None
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
        return LocationInfo(
            country_code="US",  # Placeholder - –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            country_name="United States",
            region="Unknown",
            city=None,
            timezone=None,
            latitude=latitude,
            longitude=longitude,
            confidence=DetectionConfidence.HIGH,
            source=DetectionSource.TELEGRAM,
            language=context.get("language")
        )
    
    async def _detect_via_ip(self, context: Dict[str, Any]) -> Optional[LocationInfo]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"""
        ip_address = context.get("ip_address")
        if not ip_address:
            logger.debug("üåê No IP address provided for geolocation")
            return None
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        logger.debug(f"üåê IP geolocation for {ip_address} not implemented")
        return None
    
    async def _detect_via_timezone(self, context: Dict[str, Any]) -> Optional[LocationInfo]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ"""
        timezone = context.get("timezone")
        if not timezone:
            logger.debug("üïê No timezone provided")
            return None
        
        # –ú–∞–ø–ø–∏–Ω–≥ timezone –Ω–∞ —Ä–µ–≥–∏–æ–Ω—ã
        timezone_mapping = {
            "Europe/Moscow": ("RU", "Russia", "Moscow"),
            "Europe/Berlin": ("DE", "Germany", "Berlin"),
            "America/New_York": ("US", "United States", "New York"),
            "America/Los_Angeles": ("US", "United States", "California"),
            "Europe/Paris": ("FR", "France", "Paris"),
            "Europe/Rome": ("IT", "Italy", "Rome"),
            "Asia/Tokyo": ("JP", "Japan", "Tokyo"),
            "Europe/London": ("GB", "United Kingdom", "London"),
            "Asia/Dubai": ("AE", "United Arab Emirates", "Dubai"),
            "Asia/Riyadh": ("SA", "Saudi Arabia", "Riyadh"),
        }
        
        if timezone in timezone_mapping:
            country_code, country_name, region = timezone_mapping[timezone]
            
            logger.debug(f"üïê Location detected via timezone {timezone}: {country_code}")
            
            return LocationInfo(
                country_code=country_code,
                country_name=country_name,
                region=region,
                city=None,
                timezone=timezone,
                latitude=None,
                longitude=None,
                confidence=DetectionConfidence.LOW,
                source=DetectionSource.TIMEZONE,
                language=context.get("language")
            )
        
        logger.debug(f"üïê Unknown timezone: {timezone}")
        return None
    
    async def _detect_via_language_fallback(self, context: Dict[str, Any]) -> Optional[LocationInfo]:
        """Fallback –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        language = context["language"]
        
        # –ú–∞–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω—ã (–æ—á–µ–Ω—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π)
        language_mapping = {
            "ru": ("RU", "Russia", "Central Russia"),
            "en": ("US", "United States", "North America"),
            "de": ("DE", "Germany", "Central Europe"),
            "fr": ("FR", "France", "Western Europe"),
            "it": ("IT", "Italy", "Southern Europe"),
            "ja": ("JP", "Japan", "East Asia"),
            "es": ("ES", "Spain", "Southern Europe"),
            "pt": ("BR", "Brazil", "South America"),
            "zh": ("CN", "China", "East Asia"),
            "ar": ("SA", "Saudi Arabia", "Middle East"),
        }
        
        if language in language_mapping:
            country_code, country_name, region = language_mapping[language]
            
            logger.debug(f"üó£Ô∏è Location fallback via language {language}: {country_code}")
            
            return LocationInfo(
                country_code=country_code,
                country_name=country_name,
                region=region,
                city=None,
                timezone=None,
                latitude=None,
                longitude=None,
                confidence=DetectionConfidence.VERY_LOW,
                source=DetectionSource.LANGUAGE,
                language=language
            )
        
        logger.debug(f"üó£Ô∏è Unknown language: {language}")
        return None
    
    def get_regional_context(self, location: LocationInfo) -> RegionalContext:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫—É—Ö–Ω–∏ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏"""
        try:
            cuisine_data = get_regional_cuisine(location.country_code)
            
            return RegionalContext(
                region_code=cuisine_data["region_code"],
                cuisine_types=cuisine_data["cuisine_types"],
                common_products=cuisine_data["common_products"],
                seasonal_products=cuisine_data["seasonal_products"],
                cooking_methods=cuisine_data["cooking_methods"],
                measurement_units=cuisine_data["measurement_units"],
                dietary_preferences=cuisine_data["dietary_preferences"],
                food_culture_notes=cuisine_data["food_culture_notes"]
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error getting regional context: {e}")
            # Fallback –Ω–∞ default –∫—É—Ö–Ω—é
            default_cuisine = get_default_cuisine()
            return RegionalContext(
                region_code=default_cuisine["region_code"],
                cuisine_types=default_cuisine["cuisine_types"],
                common_products=default_cuisine["common_products"],
                seasonal_products=default_cuisine["seasonal_products"],
                cooking_methods=default_cuisine["cooking_methods"],
                measurement_units=default_cuisine["measurement_units"],
                dietary_preferences=default_cuisine["dietary_preferences"],
                food_culture_notes=default_cuisine["food_culture_notes"]
            )
    
    def _get_cached_location(self, user_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∫—ç—à–∞"""
        if user_id in self.location_cache:
            cached = self.location_cache[user_id]
            cached_at = datetime.fromisoformat(cached["cached_at"])
            
            if datetime.now() - cached_at < self.cache_ttl:
                return cached
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
                del self.location_cache[user_id]
                logger.debug(f"üóëÔ∏è Expired cache removed for user {user_id}")
        
        return None
    
    async def _cache_location(self, user_id: str, location: LocationInfo, regional_context: RegionalContext):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cache_entry = {
                "user_id": user_id,
                "location": location,
                "regional_context": regional_context,
                "cached_at": datetime.now().isoformat()
            }
            
            self.location_cache[user_id] = cache_entry
            logger.debug(f"üíæ Location cached for user {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Error caching location for user {user_id}: {e}")
    
    def _get_default_location(self, language: str) -> LocationInfo:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞
        default_countries = {
            "ru": ("RU", "Russia"),
            "en": ("US", "United States"),
            "de": ("DE", "Germany"),
            "fr": ("FR", "France"),
            "it": ("IT", "Italy"),
            "ja": ("JP", "Japan"),
            "ar": ("SA", "Saudi Arabia")
        }
        
        country_code, country_name = default_countries.get(language, ("US", "United States"))
        
        return LocationInfo(
            country_code=country_code,
            country_name=country_name,
            region="Default Region",
            city=None,
            timezone=None,
            latitude=None,
            longitude=None,
            confidence=DetectionConfidence.DEFAULT,
            source=DetectionSource.DEFAULT,
            language=language
        )
    
    async def update_location_cache(self, user_id: str, location: LocationInfo):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            regional_context = self.get_regional_context(location)
            await self._cache_location(user_id, location, regional_context)
            logger.info(f"‚úÖ Location cache updated for user {user_id}")
        except Exception as e:
            logger.error(f"‚ùå Error updating location cache for user {user_id}: {e}")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        total_entries = len(self.location_cache)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
        expired_entries = 0
        oldest_entry = None
        newest_entry = None
        
        for cache in self.location_cache.values():
            cached_at = datetime.fromisoformat(cache["cached_at"])
            
            if datetime.now() - cached_at >= self.cache_ttl:
                expired_entries += 1
            
            if oldest_entry is None or cached_at < oldest_entry:
                oldest_entry = cached_at
            
            if newest_entry is None or cached_at > newest_entry:
                newest_entry = cached_at
        
        active_entries = total_entries - expired_entries
        
        return {
            "total_entries": total_entries,
            "active_entries": active_entries,
            "expired_entries": expired_entries,
            "cache_ttl_hours": self.cache_ttl.total_seconds() / 3600,
            "oldest_entry": oldest_entry.isoformat() if oldest_entry else None,
            "newest_entry": newest_entry.isoformat() if newest_entry else None
        }
    
    async def cleanup_expired_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞"""
        expired_keys = []
        
        for user_id, cache in self.location_cache.items():
            cached_at = datetime.fromisoformat(cache["cached_at"])
            if datetime.now() - cached_at >= self.cache_ttl:
                expired_keys.append(user_id)
        
        for user_id in expired_keys:
            del self.location_cache[user_id]
        
        if expired_keys:
            logger.info(f"üóëÔ∏è Cleaned up {len(expired_keys)} expired cache entries")
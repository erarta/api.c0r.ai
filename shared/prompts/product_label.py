"""
Prompts specialized for single product label analysis (barcode/packaging).
Separate from dish analysis prompts.
"""

def get_product_label_prompt(user_language: str = "en") -> str:
    if user_language == "ru":
        return (
            """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ —É–ø–∞–∫–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ (–æ–¥–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–∞). –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1) –°—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç —Å —ç—Ç–∏–∫–µ—Ç–∫–∏ (—Å–æ—Å—Ç–∞–≤ –∏ –ø–∏—Ç–∞–Ω–∏–µ/–ö–ë–ñ–£),
2) –ò–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ 100 –≥/–º–ª –∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –∑–∞ –ø–æ—Ä—Ü–∏—é,
3) –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ç–∏–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—ã—Ä —Å–ª–∏–≤–æ—á–Ω—ã–π, —à–æ–∫–æ–ª–∞–¥ –º–æ–ª–æ—á–Ω—ã–π –∏ —Ç.–ø.),
4) –î–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –∏ —Ä–∏—Å–∫–æ–≤ (—Å–∞—Ö–∞—Ä, —Å–æ–ª—å, –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã –∏ —Ç.–¥.),
5) –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å 2‚Äì3 –±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏ –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é.

–í–µ—Ä–Ω–∏ –°–¢–†–û–ì–û –≤–∞–ª–∏–¥–Ω—ã–π JSON —Å –ø–æ–ª—è–º–∏:
{
  "analysis": {
    "food_items": [{"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "weight_grams": 100, "calories": —á–∏—Å–ª–æ, "emoji": "üçΩÔ∏è", "health_benefits": ""}],
    "total_nutrition": {"calories": —á–∏—Å–ª–æ, "proteins": —á–∏—Å–ª–æ, "fats": —á–∏—Å–ª–æ, "carbohydrates": —á–∏—Å–ª–æ},
    "provenance": {
      "source": "perplexity",
      "per_100g": {"calories": —á–∏—Å–ª–æ, "proteins": —á–∏—Å–ª–æ, "fats": —á–∏—Å–ª–æ, "carbohydrates": —á–∏—Å–ª–æ},
      "serving_size": "—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null"
    },
    "nutrition_analysis": {"health_score": —á–∏—Å–ª–æ_0_10, "positive_aspects": [], "improvement_suggestions": []},
    "recommendations": {"better_alternatives": [], "usage_tips": []},
    "motivation_message": "—Å—Ç—Ä–æ–∫–∞"
  }
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏:
- –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∏; –∑–∞–ø—è—Ç—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –≤ —Ç–æ—á–∫–∏.
- –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—à—å –∫–î–∂, –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –∫–∫–∞–ª: kcal = kJ / 4.184.
- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã, –æ—Ü–µ–Ω–∏ –∫–∞–ª–æ—Ä–∏–∏: 4*–±–µ–ª–∫–∏ + 9*–∂–∏—Ä—ã + 4*—É–≥–ª–µ–≤–æ–¥—ã.
"""
        )
    else:
        return (
            """
Analyze a photo of a single product package (one item). Tasks:
1) Read text from the label (ingredients and nutrition facts),
2) Extract per-100g/ml values and, if present, per-serving,
3) Determine the exact product name and type (e.g., cream cheese, milk chocolate),
4) Provide a brief health assessment (sugars, salt, saturated fat, etc.),
5) Propose 2‚Äì3 healthier alternatives in the same category and simple usage tips.

Return STRICT valid JSON with fields:
{
  "analysis": {
    "food_items": [{"name": "name", "weight_grams": 100, "calories": number, "emoji": "üçΩÔ∏è", "health_benefits": ""}],
    "total_nutrition": {"calories": number, "proteins": number, "fats": number, "carbohydrates": number},
    "provenance": {
      "source": "perplexity",
      "per_100g": {"calories": number, "proteins": number, "fats": number, "carbohydrates": number},
      "serving_size": "string or null"
    },
    "nutrition_analysis": {"health_score": number_0_10, "positive_aspects": [], "improvement_suggestions": []},
    "recommendations": {"better_alternatives": [], "usage_tips": []},
    "motivation_message": "string"
  }
}

Accuracy notes:
- Use numbers, not strings; normalize commas to dots.
- If energy is in kJ, convert to kcal: kcal = kJ / 4.184.
- If only macros are present, estimate kcal: 4*protein + 9*fat + 4*carbs.
"""
        )


